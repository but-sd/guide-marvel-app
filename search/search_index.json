{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":"<p>L'objectif de cette application est de mettre en oeuvre les diff\u00e9rents concepts manipul\u00e9s au cours du d\u00e9veloppement d'une application web moderne.</p>"},{"location":"#ce-que-nous-allons-voir","title":"Ce que nous allons voir","text":"<p>Au travers de diff\u00e9rentes versions de l'application web, nous allons voir :</p> <ul> <li>comment utiliser git pour travailler de mani\u00e8re professionnelle (historique, branches, tags, etc...)</li> <li>comment utiliser github pour h\u00e9berger le code source de l'application et travailler en \u00e9quipe (issues, pull requests, etc...)</li> <li>comment cr\u00e9er une application web avec les technologies adapt\u00e9es (react, react-router, etc...)</li> <li>comment fiabiliser l'application web (tests unitaires, tests d'int\u00e9gration, qualit\u00e9 du code, etc...)</li> <li>comment documenter l'application web (documentation technique, documentation utilisateur, etc...)</li> <li>comment d\u00e9ployer l'application web (sur un serveur, sur un service cloud, etc...)</li> <li>comment incorporer une librairie tierce (material-ui, d3js, etc...)</li> </ul>"},{"location":"#guides","title":"Guides","text":"<p>Des guides sont disponibles pour vous aider \u00e0 r\u00e9aliser ce projet :</p> <ul> <li>Guide Git</li> <li>Guide HTML, CSS, JavaScript</li> <li>Guide React</li> <li>Guide GitHub</li> </ul>"},{"location":"version-0.1.0/","title":"Version 0.1.0","text":""},{"location":"version-0.1.0/#objectifs","title":"Objectifs","text":"<ul> <li>Initialisation du projet<ul> <li>Utilisation de git pour g\u00e9rer l'historique des modifications du projet</li> <li>Utilisation de npm pour g\u00e9rer les d\u00e9pendances du projet</li> <li>Utilisation de browser-sync pour cr\u00e9er un serveur web local</li> </ul> </li> <li>Impl\u00e9mentation d'une page web<ul> <li>Contenu statique de la page HTML (HyperText Markup Language)</li> <li>Application du style avec CSS (Cascading Style Sheets)</li> </ul> </li> <li>Sauvegarde du projet sur GitHub</li> </ul> <p>Flow git de la version 0.1.0 :</p> <pre><code>gitGraph\n    checkout main\n    commit id:\"init\"\n    commit id:\"hello\"\n    commit id:\"characters\"\n    commit id:\"style\" tag: \"v0.1.0\"</code></pre>"},{"location":"version-0.1.0/#prerequis","title":"Pr\u00e9requis","text":"<p>Installation de Node.js</p> <p>Node.js est un environnement d'ex\u00e9cution JavaScript. Il permet d'ex\u00e9cuter du code JavaScript en dehors d'un navigateur web. Il est bas\u00e9 sur le moteur JavaScript V8 de Google, qui est le moteur JavaScript utilis\u00e9 par le navigateur Chrome.</p> <p>Pour installer Node.js, rendez-vous sur le site officiel : https://nodejs.org/en/</p> <p>Dans un premier temps, nous allons utiliser Node.js pour installer des d\u00e9pendances, qui sont des biblioth\u00e8ques JavaScript. La premi\u00e8re d\u00e9pendance que nous allons installer nous permettra de cr\u00e9er un serveur web local.</p> <p>Nous irons plus loin avec Node.js plus tard, pour utiliser des librairies JavaScript telles que React, qui est une librairie JavaScript d\u00e9velopp\u00e9e par Facebook, qui permet de cr\u00e9er des interfaces utilisateur.</p> <p>Installation de Visual Studio Code</p> <p>Visual Studio Code est un \u00e9diteur de code open source, d\u00e9velopp\u00e9 par Microsoft. Il est disponible pour Windows, Mac et Linux.</p> <p>Pour installer Visual Studio Code, rendez-vous sur le site officiel : https://code.visualstudio.com/</p> <p>Visual Studio Code est un \u00e9diteur de code tr\u00e8s complet, qui permet de d\u00e9velopper dans de nombreux langages de programmation. Il est tr\u00e8s utilis\u00e9 par les d\u00e9veloppeurs JavaScript, car il permet d'installer des extensions pour am\u00e9liorer l'exp\u00e9rience de d\u00e9veloppement. Nous verrons plus tard comment installer des extensions pour Visual Studio Code.</p> <p>Installation de Git</p> <p>Git est un logiciel de gestion de versions d\u00e9centralis\u00e9. Il permet de g\u00e9rer l'historique des modifications d'un projet. Il est utilis\u00e9 par GitHub, qui est un service web d'h\u00e9bergement et de gestion de code source.</p> <p>Pour installer Git, rendez-vous sur le site officiel : https://git-scm.com/</p> <p>Nous verrons plus tard comment utiliser Git pour g\u00e9rer l'historique des modifications de notre projet.</p> <p>Il est toutefois n\u00e9cessaire d'appliquer quelques configurations avant de pouvoir utiliser Git, voir Configurer Git.</p>"},{"location":"version-0.1.0/#initialisation-du-projet","title":"Initialisation du projet","text":""},{"location":"version-0.1.0/#git-github","title":"git / GitHub","text":"<p>Cr\u00e9ation du projet sur GitHub</p> <p>Cr\u00e9er un nouveau projet sur GitHub avec le nom <code>marvel-app</code>. Cocher la case <code>Initialize this repository with a README</code>.</p> <p>Cela va cr\u00e9er un nouveau d\u00e9p\u00f4t de code sur GitHub, avec un fichier README.md. Le fichier README.md est un fichier au format Markdown, qui permet de documenter le projet. Nous verrons plus tard comment utiliser Markdown.</p> <p>R\u00e9cup\u00e9ration du projet en local</p> <p>Remarque: Le projet doit \u00eatre r\u00e9cup\u00e9r\u00e9 en local sur votre compte utilisateur Windows ( par exemple dans un dossier <code>dev</code>), et non pas dans un dossier partag\u00e9 sur un serveur (lecteur r\u00e9seau Z:), cela pose en effet des probl\u00e8mes lors de l'ex\u00e9cution de certaines commandes.</p> <p>Cloner le projet sur votre ordinateur avec la commande suivante :</p> <pre><code>git clone url-du-projet\n</code></pre>"},{"location":"version-0.1.0/#npm","title":"npm","text":"<p>Initialiser le projet npm avec la commande suivante :</p> <pre><code>npm init -y\n</code></pre> <p>Cela va cr\u00e9er un nouveau fichier <code>package.json</code> \u00e0 la racine du projet. Ce fichier contient les informations du projet, ainsi que la liste des d\u00e9pendances du projet.</p> <p>Modifier le fichier g\u00e9n\u00e9r\u00e9 pour mettre la version du projet \u00e0 <code>0.1.0</code> :</p> <pre><code>{\n    \"version\": \"0.1.0\"\n}\n</code></pre>"},{"location":"version-0.1.0/#browser-sync","title":"browser-sync","text":"<p><code>browser-sync</code> est une d\u00e9pendance qui permet de cr\u00e9er un serveur web local, avec un rechargement automatique du navigateur \u00e0 chaque modification du code source. Cela nous permettra de tester simplement la premi\u00e8re version de notre application en local.</p> <p>Installation</p> <p>Installer la d\u00e9pendance <code>browser-sync</code> avec la commande suivante :</p> <pre><code>npm install --save-dev browser-sync\n</code></pre> <p>Cela va installer la d\u00e9pendance <code>browser-sync</code> dans le dossier <code>node_modules</code> du projet. La d\u00e9pendance sera ajout\u00e9e dans la liste des d\u00e9pendances du projet dans le fichier <code>package.json</code>. L'option <code>--save-dev</code> permet d'ajouter la d\u00e9pendance dans la liste des d\u00e9pendances de d\u00e9veloppement. Cela permet de distinguer les d\u00e9pendances de d\u00e9veloppement des d\u00e9pendances de production.</p> <p>Les fichiers pr\u00e9sents dans le dossier <code>node_modules</code> ne doivent pas \u00eatre versionn\u00e9s. Nous allons donc les ignorer en cr\u00e9ant un fichier <code>.gitignore</code> \u00e0 la racine du projet avec le contenu suivant :</p> <pre><code>node_modules\n</code></pre> <p>Configuration</p> <p>Cr\u00e9er un fichier <code>bs-config.js</code> \u00e0 la racine du projet avec le contenu suivant :</p> <pre><code>module.exports = {\n    files: [\n        'src/**/*.{html,htm,css,js}'\n    ],\n    server: {\n        baseDir: './src'\n    }\n};\n</code></pre> <p>Ce fichier permet de configurer browser-sync. Nous indiquons que nous souhaitons surveiller les fichiers html, css et js dans le dossier <code>src</code>, et que le serveur web doit servir les fichiers du dossier <code>src</code>.</p> <p>Ex\u00e9cution</p> <p>Modifier le fichier <code>package.json</code> pour ajouter les scripts suivants :</p> <pre><code>{\n    \"scripts\": {\n        \"start\": \"browser-sync start --config bs-config.js\"\n    }\n}\n</code></pre> <p>Cela nous permettra de lancer le serveur web local avec la commande suivante :</p> <pre><code>npm start\n</code></pre> <p>Cr\u00e9er un dossier <code>src</code> \u00e0 la racine du projet. Ce dossier contiendra le code source de notre application.</p> <p>Ajouter un fichier <code>src/index.html</code> avec le contenu suivant :</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello, World!&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Lancer le serveur web local avec la commande suivante :</p> <pre><code>npm start\n</code></pre> <p>Ouvrir l'adresse http://localhost:3000 dans un navigateur web. Vous devriez voir le contenu du fichier <code>index.html</code>.</p> <p>Commiter les modifications :</p> <pre><code>git add .\ngit commit -m \"Hello, World!\"\n</code></pre>"},{"location":"version-0.1.0/#implementation-dune-page-web","title":"Impl\u00e9mentation d'une page web","text":""},{"location":"version-0.1.0/#html","title":"HTML","text":"<p>Modifier le fichier <code>index.html</code> pour mettre le contenu suivant :</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;Marvel App&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Marvel App&lt;/h1&gt;\n        &lt;ul id=\"characters\"&gt;\n            &lt;li&gt;\n                Beast\n            &lt;/li&gt;\n            &lt;li&gt;\n                Captain America\n            &lt;/li&gt;\n            &lt;li&gt;\n                Deadpool\n            &lt;/li&gt;\n            &lt;li&gt;\n                Groot\n            &lt;/li&gt;\n            &lt;li&gt;\n                Hulk\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Commiter les modifications :</p> <pre><code>git add .\ngit commit -m \"Add static content\"\n</code></pre>"},{"location":"version-0.1.0/#css","title":"CSS","text":"<p>Cr\u00e9er un fichier <code>src/style.css</code> avec le contenu suivant :</p> <pre><code>body {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n</code></pre> <p>Modifier le fichier <code>index.html</code> pour ajouter le lien vers le fichier <code>style.css</code> :</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;Marvel App&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Marvel App&lt;/h1&gt;\n        &lt;ul id=\"characters\"&gt;\n            &lt;li&gt;\n                Beast\n            &lt;/li&gt;\n            &lt;li&gt;\n                Captain America\n            &lt;/li&gt;\n            &lt;li&gt;\n                Deadpool\n            &lt;/li&gt;\n            &lt;li&gt;\n                Groot\n            &lt;/li&gt;\n            &lt;li&gt;\n                Hulk\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>L'attribut <code>rel</code> permet d'indiquer le type de lien. Ici, nous indiquons que le lien est une feuille de style. L'attribut <code>href</code> permet d'indiquer l'adresse du fichier.</p> <p>L'apparence de la page web devrait changer. Nous avons appliqu\u00e9 un style par d\u00e9faut au corps de la page web, pour supprimer les marges et les espacements par d\u00e9faut.</p> <p>Commiter les modifications :</p> <pre><code>git add .\ngit commit -m \"Add style\"\n</code></pre>"},{"location":"version-0.1.0/#sauvegarde-du-projet-sur-github","title":"Sauvegarde du projet sur GitHub","text":"<p>Envoyer les modifications sur GitHub avec la commande suivante :</p> <pre><code>git push\n</code></pre> <p>Cr\u00e9ation d'un tag</p> <p>Cr\u00e9er un tag <code>v0.1.0</code> avec la commande suivante :</p> <pre><code>git tag v0.1.0 -m \"version 0.0.1\"\n</code></pre> <p>Un tag permet de marquer un commit. Cela nous permettra de retrouver facilement les diff\u00e9rentes versions de notre projet.</p> <p>Envoyer le tag <code>v0.1.0</code> sur GitHub avec la commande suivante :</p> <pre><code>git push origin v0.1.0\n</code></pre>"},{"location":"version-0.2.0/","title":"Version 0.2.0","text":""},{"location":"version-0.2.0/#objectifs","title":"Objectifs","text":"<ul> <li>Utilisation de git pour travailler sur plusieurs fonctionnalit\u00e9s en m\u00eame temps</li> <li>Ajout de contenu JavaScript pour r\u00e9cup\u00e9rer des donn\u00e9es depuis un fichier JSON</li> <li>Ajout de style CSS pour am\u00e9liorer l'affichage</li> </ul> <p>Flow git de la version 0.2.0 :</p> <pre><code>gitGraph\n    checkout main\n    commit tag: \"v0.1.0\"\n    branch develop\n    checkout develop\n    branch feature-style\n    branch feature-data\n    checkout feature-style\n    commit id: \"style\"\n    checkout feature-data\n    commit id: \"data\"\n    commit id: \"characters\"\n    checkout develop\n    merge feature-style\n    merge feature-data\n    checkout main\n    merge develop\n    commit tag: \"v0.2.0\"</code></pre>"},{"location":"version-0.2.0/#preparation-des-branches-de-travail","title":"Pr\u00e9paration des branches de travail","text":"<p>Bien que les modifications soient mineures, nous allons voir comment utiliser git pour travailler sur le projet et nous faciliter la vie. Nous allons pouvoir travailler sur les deux fonctionnalit\u00e9s en m\u00eame temps, et les sauvegarder ind\u00e9pendamment. Nous allons utiliser les branches de git pour cela, en respectant un workflow de d\u00e9veloppement, appel\u00e9 Gitflow.</p>"},{"location":"version-0.2.0/#creation-de-la-branche-develop","title":"Cr\u00e9ation de la branche <code>develop</code>","text":"<p>La branche <code>develop</code> va nous permettre de travailler sur les deux fonctionnalit\u00e9s sans modifier la branche <code>main</code>. La branche <code>main</code> contient la version stable du projet. Nous allons donc cr\u00e9er la branche <code>develop</code> \u00e0 partir de la branche <code>main</code>.</p> <p>Pour travailler sur les deux fonctionnalit\u00e9s en m\u00eame temps. Nous allons ensuite cr\u00e9er une branche pour chaque fonctionnalit\u00e9.</p> <p>Cr\u00e9er la branche <code>develop</code> avec l'une des commandes suivante :</p> <pre><code>git checkout -b develop\n\n# ou\n\ngit switch -c develop\n</code></pre> <p>La commande <code>git checkout</code> permet de changer de branche. L'option <code>-b</code> permet de cr\u00e9er la branche si elle n'existe pas. La commande <code>git switch</code> permet \u00e9galement de changer de branche. L'option <code>-c</code> permet de cr\u00e9er la branche si elle n'existe pas. Les deux commandes sont \u00e9quivalentes. La commande <code>git checkout</code> est d\u00e9pr\u00e9ci\u00e9e, et sera supprim\u00e9e dans une prochaine version de git. Cependant, elle est encore utilis\u00e9e par beaucoup de d\u00e9veloppeurs, il n'est pas rare de la voir dans des tutoriels ou des documentations.</p> <p>Ces deux commandes cr\u00e9eront la branche <code>develop</code> \u00e0 partir de la branche active. La branche active est la branche sur laquelle vous vous trouvez. Pour conna\u00eetre la branche active, vous pouvez utiliser la commande suivante :</p> <pre><code>git branch --show-current\n</code></pre>"},{"location":"version-0.2.0/#creation-des-branches-feature","title":"Cr\u00e9ation des branches feature/*","text":"<p>Nous allons cr\u00e9er deux branches pour les deux fonctionnalit\u00e9s. Nous allons cr\u00e9er les branches <code>feature/style</code> et <code>feature/data</code> \u00e0 partir de la branche <code>develop</code>.</p> <p>Cr\u00e9er les branches <code>feature/style</code> et <code>feature/data</code> avec les commandes suivante :</p> <pre><code>git switch -c feature/style develop\ngit switch -c feature/data develop\n</code></pre> <p>Le dernier argument de la commande <code>git switch</code> est la branche \u00e0 partir de laquelle nous allons cr\u00e9er la nouvelle branche.</p> <p>Pour lister les branches, vous pouvez utiliser la commande suivante :</p> <pre><code>git branch\n</code></pre> <p>La branche active est la branche qui est pr\u00e9c\u00e9d\u00e9e d'un <code>*</code>.</p>"},{"location":"version-0.2.0/#ajout-de-style","title":"Ajout de style","text":"<p>Se positionner sur la branche <code>feature/style</code> avec la commande suivante :</p> <pre><code>git switch feature/style\n</code></pre> <p>Modifier le fichier <code>style.css</code> pour remplacer son contenu par le contenu suivant :</p> <pre><code>body {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    margin: 0;\n    padding: 20px;\n    background: #333;\n    color: #fff;\n    text-align: center;\n}\n\nul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\nli {\n    padding: 10px;\n    border-bottom: 1px solid #ccc;\n}\n</code></pre> <p>Nous utilisons ici des s\u00e9lecteurs CSS pour appliquer des styles aux \u00e9l\u00e9ments HTML. Nous appliquons un style aux \u00e9l\u00e9ments <code>body</code>, <code>h1</code>, <code>ul</code> et <code>li</code>. </p> <p>Si l'on souhaite cibler plus pr\u00e9cis\u00e9ment un \u00e9l\u00e9ment, nous pouvons utiliser un s\u00e9lecteur plus sp\u00e9cifique. Par exemple, si l'on souhaite cibler uniquement les \u00e9l\u00e9ments <code>li</code> qui sont dans la liste des personnages, nous pouvons utiliser le s\u00e9lecteur <code>#characters li</code>. Le <code>#</code> permet de cibler un \u00e9l\u00e9ment par son identifiant. L'identifiant est d\u00e9fini dans le fichier <code>index.html</code> avec l'attribut <code>id</code>. </p> <p>Pour plus de d\u00e9tails sur les s\u00e9lecteurs CSS, vous pouvez consulter la documentation de guide-html.</p> <p>Commiter les modifications :</p> <pre><code>git add .\ngit commit -m \"Add style\"\n</code></pre>"},{"location":"version-0.2.0/#ajout-de-contenu-dynamique","title":"Ajout de contenu dynamique","text":"<p>Se positionner sur la branche <code>feature/data</code> avec la commande suivante :</p> <pre><code>git switch feature/data\n</code></pre>"},{"location":"version-0.2.0/#recuperation-des-donnees","title":"R\u00e9cup\u00e9ration des donn\u00e9es","text":"<p>Simulation d'un appel d'API</p> <p>Dans un premier temps, nous allons simuler un appel d'API pour r\u00e9cup\u00e9rer des donn\u00e9es. Nous verrons plus tard comment appeler une API. Pour cela nous allons charger les donn\u00e9es depuis un fichier JSON (JavaScript Object Notation).</p> <p>Cr\u00e9er le fichier <code>src/data/characters.json</code> avec le contenu suivant :</p> <pre><code>[\n    {\n        \"name\": \"Beast\"\n    },\n    {\n        \"name\": \"Captain America\"\n    },\n    {\n        \"name\": \"Deadpool\"\n    },\n    {\n        \"name\": \"Groot\"\n    },\n    {\n        \"name\": \"Hulk\"\n    },\n    {\n        \"name\": \"Iron Man\"\n    },\n    {\n        \"name\": \"Rocket Raccoon\"\n    },\n    {\n        \"name\": \"Silver Surfer\"\n    },\n    {\n        \"name\": \"Thanos\"\n    },\n    {\n        \"name\": \"Thor\"\n    },\n    {\n        \"name\": \"Wolverine\"\n    }\n]\n</code></pre> <p>Le fichier <code>characters.json</code> contient un tableau d'objets. Chaque objet repr\u00e9sente un personnage. Chaque personnage a un attribut <code>name</code> qui contient le nom du personnage.</p> <p>R\u00e9cup\u00e9ration des donn\u00e9es</p> <p>Pour r\u00e9cup\u00e9rer les donn\u00e9es depuis le fichier JSON, nous allons utiliser la fonction <code>fetch</code> de JavaScript. Cette fonction permet de faire des requ\u00eates HTTP.</p> <p>Cr\u00e9er le fichier <code>src/script.js</code> avec le contenu suivant :</p> <pre><code>console.log(\"Welcome to marvel app\");\n\n/**\n * Get characters from json file \n */\n\nconst getCharacters = () =&gt; {\n    const API_URL = 'http://localhost:3000/data/characters.json';\n    return fetch(API_URL)\n        .then(response =&gt; response.json());\n\n};\n\n// Call getCharacters function, and add characters to the list\nconst characters = getCharacters().then(characters =&gt; {\n    console.log(characters);\n});\n</code></pre> <p>La fonction <code>fetch</code> retourne une promesse. Une promesse est un objet qui repr\u00e9sente une valeur qui peut \u00eatre disponible maintenant, dans le futur, ou jamais. Une promesse peut \u00eatre dans l'un des \u00e9tats suivants :</p> <ul> <li><code>pending</code> : la promesse n'est pas encore r\u00e9solue</li> <li><code>fulfilled</code> : la promesse est r\u00e9solue</li> <li><code>rejected</code> : la promesse est rejet\u00e9e</li> </ul> <p>Pour r\u00e9cup\u00e9rer la valeur d'une promesse, nous pouvons utiliser la m\u00e9thode <code>then</code>. Cette m\u00e9thode prend en param\u00e8tre une fonction qui sera appel\u00e9e lorsque la promesse sera r\u00e9solue. Cette fonction prend en param\u00e8tre la valeur de la promesse.</p> <p>Pour r\u00e9cup\u00e9rer les personnages, nous devons appeler la fonction <code>getCharacters</code>, puis utiliser la m\u00e9thode <code>then</code> pour r\u00e9cup\u00e9rer les personnages. Nous allons dans un premier temps afficher les personnages dans la console.</p> <p>Ouvrir la console du navigateur web. Vous devriez voir le tableau des personnages.</p>"},{"location":"version-0.2.0/#affichage-des-donnees","title":"Affichage des donn\u00e9es","text":"<p>Appel de la fonction</p> <p>Modifier le fichier <code>index.html</code> pour supprimer les \u00e9l\u00e9ments de la liste qui sont en dur et ajouter le script <code>script.js</code> pour charger dynamiquement les personnages :</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"fr\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Marvel App&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Marvel App&lt;/h1&gt;\n    &lt;ul id=\"characters\"&gt;&lt;/ul&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Commiter les modifications :</p> <pre><code>git add .\ngit commit -m \"Add data\"\n</code></pre> <p>Affichage des personnages</p> <p>Modifier le fichier <code>script.js</code> pour afficher les personnages dans la liste :</p> <pre><code>console.log(\"Welcome to marvel app\");\n\n/**\n * Get characters from json file \n */\n\nconst getCharacters = () =&gt; {\n    const API_URL = 'http://localhost:3000/data/characters.json';\n    return fetch(API_URL)\n        .then(response =&gt; response.json());\n\n};\n\n// Call getCharacters function, and add characters to the list\nconst characters = getCharacters().then(characters =&gt; {\n    const charactersList = document.getElementById('characters');\n\n    characters.forEach(character =&gt; {\n        const characterElement = document.createElement('li');\n        characterElement.textContent = character.name;\n        charactersList.appendChild(characterElement);\n    });\n});\n</code></pre> <p>Apr\u00e8s avoir charger les personnages, on r\u00e9cup\u00e8re l'\u00e9l\u00e9ment <code>ul</code> avec l'identifiant <code>characters</code>. On parcourt ensuite la liste des personnages, et pour chaque personnage on cr\u00e9e un \u00e9l\u00e9ment <code>li</code> que l'on ajoute \u00e0 l'\u00e9l\u00e9ment <code>ul</code> Pour plus de d\u00e9tail sur la manipulation du DOM en Javascript, vous pouvez consulter la documentation de guide-html.</p> <p>Commiter les modifications :</p> <pre><code>git add .\ngit commit -m \"Add characters\"\n</code></pre> <p>Nous avons termin\u00e9 de travailler sur les deux fonctionnalit\u00e9s. Nous allons fusionner les deux branches vers la branche <code>develop</code>.</p>"},{"location":"version-0.2.0/#mise-a-jour-des-branches","title":"Mise \u00e0 jour des branches","text":""},{"location":"version-0.2.0/#merge-de-featurestyle","title":"Merge de feature/style","text":"<p>Nous allons fusionner la branche <code>feature/style</code> vers la branche <code>develop</code>. La fusion permet de combiner les modifications de deux branches. </p> <p>Tout d'abord, nous allons nous positionner sur la branche <code>develop</code> avec la commande suivante :</p> <pre><code>git switch develop\n</code></pre> <p>Puis, nous allons utiliser la commande <code>git merge</code>. Cette commande prend en param\u00e8tre la branche \u00e0 fusionner. Nous allons fusionner la branche <code>feature/style</code> vers la branche <code>develop</code> avec la commande suivante :</p> <pre><code>git merge feature/style -m \"merge feature/style\"\n</code></pre> <p>La commande <code>git merge</code> va cr\u00e9er un nouveau commit de fusion. Ce commit de fusion va combiner les modifications de la branche <code>feature/style</code> vers la branche <code>develop</code>. Nous avons donc \u00e0 ce moment l\u00e0 la branche <code>develop</code> qui contient les modifications de la branche <code>feature/style</code>.</p> <p>Une fois merger, la branche <code>feature/style</code> n'est plus utile. Nous pouvons la supprimer avec la commande suivante :</p> <pre><code>git branch -d feature/style\n</code></pre>"},{"location":"version-0.2.0/#merge-de-featuredata","title":"Merge de feature/data","text":"<p>Nous allons maintenant fusionner la branche <code>feature/data</code> vers la branche <code>develop</code>. </p> <pre><code>git switch develop\ngit merge feature/data -m \"merge feature/data\"\ngit branch -d feature/data\n</code></pre> <p>Il ne devrait pas y avoir de conflit. Si vous avez un conflit, il faut le r\u00e9soudre avant de continuer.</p> <p>La branche <code>develop</code> contient maintenant les modifications des deux branches <code>feature/style</code> et <code>feature/data</code>. Nous pouvons maintenant pousser la branche <code>develop</code> sur GitHub.</p> <pre><code>git push origin develop\n</code></pre>"},{"location":"version-0.2.0/#merge-de-develop","title":"Merge de develop","text":"<p>Les deux fonctionnalit\u00e9s sont termin\u00e9es. On constate que la branche <code>develop</code> contient les modifications des deux fonctionnalit\u00e9s et que celle-ci est pleinnement fonctionnelle. Notre version 0.2.0 est donc termin\u00e9e.</p> <p>Nous allons maintenant fusionner la branche <code>develop</code> vers la branche <code>main</code>. La branche <code>main</code> est la branche principale du projet. Elle contient les versions stables du projet, c'est \u00e0 dire les versions qui sont pr\u00eates \u00e0 \u00eatre utilis\u00e9es en production.</p> <pre><code>git switch main\ngit merge develop -m \"merge develop\"\n</code></pre> <p>Nous pouvous maintenant pousser la branche <code>main</code> sur GitHub.</p> <pre><code>git push origin main\n</code></pre>"},{"location":"version-0.2.0/#tag-de-la-version-020","title":"Tag de la version 0.2.0","text":"<p>Cr\u00e9er un tag <code>v0.2.0</code> et pousser le sur GitHub avec les commandes suivantes :</p> <pre><code>git tag v0.2.0 -m \"version 0.2.0\"\ngit push origin v0.2.0\n</code></pre>"},{"location":"version-0.3.0/","title":"Version 0.3.0","text":""},{"location":"version-0.3.0/#objectifs","title":"Objectifs","text":"<ul> <li>Initialisation du projet react</li> <li>Transformation de la page liste des charact\u00e8res en composant react</li> <li>Cr\u00e9ation de composants react :</li> <li>Cr\u00e9ation du composant <code>CharactersList</code></li> <li>Cr\u00e9ation du composant <code>NumberOfCharacters</code></li> </ul> <p>Flow git de la version 0.3.0 :</p> <pre><code>gitGraph\n    checkout main\n    commit tag: \"v0.2.0\"\n    branch develop\n    checkout develop\n    branch feature-react\n    checkout feature-react\n    commit id: \"init\"\n    commit id: \"transform\"\n    commit id: \"list\"\n    commit id: \"number\"\n    checkout develop\n    merge feature-react\n    checkout main\n    merge develop\n    commit tag: \"v0.3.0\"</code></pre> <p>Basculer sur la branche <code>develop</code> et cr\u00e9er la nouvelle branche <code>feature/react</code> avec la commande suivante :</p> <pre><code>git switch develop\ngit switch -c feature/react\n</code></pre>"},{"location":"version-0.3.0/#initialisation-du-projet-react","title":"Initialisation du projet react","text":"<p>Il est possible d'initialiser un projet react gr\u00e2ce \u00e0 l'outil create-react-ap . Nous pourions initialiser le projet react avec la commande suivante :</p> <pre><code>npx create-react-app .\n</code></pre> <p>Cependant \u00e9tant donn\u00e9 que nous avons d\u00e9j\u00e0 un projet initialis\u00e9, cela risque de poser des probl\u00e8mes. Nous allons donc initialiser le projet react dans un r\u00e9pertoire temporaire, puis copier uniquement les fichiers n\u00e9cesssaires dans notre projet.</p> <p>Initialiser le projet react avec la commande suivante, dans un r\u00e9pertoire temporaire :</p> <pre><code>npx create-react-app react-tmp\n</code></pre> <p>V\u00e9rifier que le projet react fonctionne correctement avec la commande suivante :</p> <pre><code>cd react-tmp\nnpm start\n</code></pre> <p>Structure d'un projet react</p> <p>Un projet react cr\u00e9\u00e9 avec create-react-app contient un ensemble de fichiers et de dossiers qui permettent de d\u00e9velopper une application react. </p> <p>Voici la liste des fichiers et dossiers d'un projet React cr\u00e9\u00e9 avec create-react-app :</p> <ul> <li>node_modules : ce dossier contient les d\u00e9pendances, il est aliment\u00e9 par la commande <code>npm install</code>. Il n'est pas n\u00e9cessaire de le copier dans notre projet.</li> <li>public : ce dossier contient les fichiers statiques. Nous pouvons copier l'ensemble des fichiers de ce dossier dans notre projet.</li> <li>src : ce dossier contient les fichiers sources. C'est dans ce dossier que nous allons d\u00e9velopper notre application. Etant donn\u00e9 que nous avons d\u00e9j\u00e0 du contenu dans notre dossier <code>src</code>, nous allons copier les fichiers dans le r\u00e9pertoire <code>src</code> de notre projet et conserver les fichiers existants.</li> <li>.gitignore : ce fichier contient la liste des fichiers et dossiers \u00e0 ignorer par Git. Nous avons d\u00e9j\u00e0 un fichier <code>.gitignore</code> dans notre projet, nous verrons donc plus tard s'il est n\u00e9cessaire d'ajouter d'autres fichiers \u00e0 ignorer.</li> <li>package.json : ce fichier contient la liste des d\u00e9pendances ainsi que les scripts npm. Nous allons copier uniquement les donn\u00e9es qui nous int\u00e9ressent dans notre fichier <code>package.json</code>.<ul> <li>l'ensemble des scripts npm et renommer le script <code>start</code> existant en <code>start-html-version</code> </li> <li>l'ensemble des d\u00e9pendances <code>dependencies</code> qui permettent de faire fonctionner l'application React</li> <li>la partie <code>eslintConfig</code> qui permet de configurer eslint (nous verrons plus tard ce qu'est eslint)</li> <li>la partie <code>browserslist</code> qui permet de configurer les navigateurs support\u00e9s par l'application React</li> </ul> </li> </ul> <p>Une fois les fichiers copi\u00e9s, nous allons installer les nouvelles d\u00e9pendances avec la commande suivante :</p> <pre><code>npm install\n</code></pre> <p>Et v\u00e9rifier que l'application react fonctionne correctement avec la commande suivante :</p> <pre><code>npm run start\n</code></pre> <p>Etant donn\u00e9 que nous avons une application react fonctionnelle, nous allons commiter les modifications, pour pouvoir ensuite la modifier.</p> <p>Commiter les modifications avec la commande suivante :</p> <pre><code>git add .\ngit commit -m \"Initialize react project\"\n</code></pre>"},{"location":"version-0.3.0/#transformation-de-la-page-liste-des-characteres-en-composant-react","title":"Transformation de la page liste des charact\u00e8res en composant react","text":""},{"location":"version-0.3.0/#liste-statique-des-characteres","title":"Liste statique des charact\u00e8res","text":"<p>Dans une application react, le composant racine est appel\u00e9 <code>App</code>. C'est ce composant qui est affich\u00e9 dans la page web. Nous allons donc transformer la page liste des charact\u00e8res en composant <code>App</code>.</p> <p>Dans un premier temps, nous allons le cr\u00e9er avec une liste statique de charact\u00e8res.</p> <p>Remplacer le contenu du fichier <code>App.js</code> par le contenu suivant :</p> <pre><code>import './style.css';\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Marvel Characters&lt;/h1&gt;\n      &lt;ul id=\"characters\"&gt;\n        &lt;li&gt;\n          Beast\n        &lt;/li&gt;\n        &lt;li&gt;\n          Captain America\n        &lt;/li&gt;\n        &lt;li&gt;\n          Deadpool\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Le fichier <code>App.js</code>  est un fichier javascript qui exporte une fonction <code>App</code>. On constate que cette fonction retourne du code HTML. En effet, react permet de cr\u00e9er des composants en utilisant du code HTML. C'est ce qu'on appelle le JSX (JavaScript Syntax Extension) </p> <p>Quelques explications sur le JSX, voir.</p> <p>Pour la documentation officielle de react sur la partie JSX voir.</p>"},{"location":"version-0.3.0/#liste-dynamique-des-characteres","title":"Liste dynamique des charact\u00e8res","text":"<p>Dans un second temps, nous allons transformer la liste statique de charact\u00e8res en liste dynamique.</p> <p>Nous devons modifier le fichier <code>characters.json</code> pour ajouter un identifiant \u00e0 chaque charact\u00e8re, en effet react a besoin d'un identifiant unique pour chaque \u00e9l\u00e9ment d'une liste.</p> <pre><code>[\n    {\n        \"id\": \"1009175\",\n        \"name\": \"Beast\"\n    },\n    {\n        \"id\": \"1009220\",\n        \"name\": \"Captain America\"\n    },\n    {\n        \"id\": \"1009268\",\n        \"name\": \"Deadpool\"\n    },\n    {\n        \"id\": \"1010743\",\n        \"name\": \"Groot\"\n    },\n    {\n        \"id\": \"1009351\",\n        \"name\": \"Hulk\"\n    },\n    {\n        \"id\": \"1009368\",\n        \"name\": \"Iron Man\"\n    },\n    {\n        \"id\": \"1010744\",\n        \"name\": \"Rocket Raccoon\"\n    },\n    {\n        \"id\": \"1009592\",\n        \"name\": \"Silver Surfer\"\n    },\n    {\n        \"id\": \"1009697\",\n        \"name\": \"Thanos\"\n    },\n    {\n        \"id\": \"1009663\",\n        \"name\": \"Thor\"\n    },\n    {\n        \"id\": \"1009718\",\n        \"name\": \"Wolverine\"\n    }\n]\n</code></pre> <p>Nous devons ensuite modifier le fichier <code>App.js</code> pour afficher la liste des charact\u00e8res dynamiquement.</p> <pre><code>import './style.css';\n\nconst characters = require('./data/characters.json');\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Marvel Characters&lt;/h1&gt;\n      &lt;ul id=\"characters\"&gt;\n        {characters.map((character) =&gt; (\n          &lt;li key={character.id}&gt;{character.name}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Afin de faciliter la compr\u00e9hension du code, nous avons r\u00e9cup\u00e9r\u00e9 la liste des charact\u00e8res directement depuis le fichier <code>characters.json</code>. Nous verrons plus tard comment r\u00e9cup\u00e9rer des donn\u00e9es correctement.</p> <p>Nous utilisons la fonction <code>map</code> pour parcourir la liste des charact\u00e8res et afficher un \u00e9l\u00e9ment <code>li</code> pour chaque charact\u00e8re. Nous utilisons l'attribut <code>key</code> pour indiquer \u00e0 react que chaque \u00e9l\u00e9ment est unique.</p> <p>Nous avons transform\u00e9 la page liste des charact\u00e8res en composant react. Nous allons encore modifier ce composant, mais avant cela, nous allons commiter les modifications avec la commande suivante :</p> <pre><code>git add .\ngit commit -m \"Transform characters list page into react component\"\n</code></pre>"},{"location":"version-0.3.0/#creation-de-composants-react","title":"Cr\u00e9ation de composants react","text":""},{"location":"version-0.3.0/#creation-du-composant-characterslist","title":"Cr\u00e9ation du composant <code>CharactersList</code>","text":"<p>Nous allons ressortir la liste des charact\u00e8res dans un composant <code>CharactersList</code>.</p> <p>Cr\u00e9er le fichier <code>src/components/CharactersList.js</code> avec le contenu suivant :</p> <pre><code>export function CharactersList({ characters }) {\n  return (\n    &lt;ul id=\"characters\"&gt;\n      {characters.map((character) =&gt; (\n        &lt;li key={character.id}&gt;{character.name}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Modifier le fichier <code>App.js</code> pour utiliser le composant <code>CharactersList</code> :</p> <pre><code>import './style.css';\nimport { CharactersList } from './components/CharactersList';\n\nconst characters = require('./data/characters.json');\n\nfunction App() {\n  console.log((characters));\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Marvel Characters&lt;/h1&gt;\n      &lt;CharactersList characters={characters} /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Nous utilisons le composant <code>CharactersList</code> en lui passant la liste des charact\u00e8res en param\u00e8tre. </p> <p>Nous avons maintenant un composant <code>CharactersList</code> qui permet d'afficher la liste des charact\u00e8res. Nous pouvons donc commiter avec la commande suivante :</p> <pre><code>git add .\ngit commit -m \"Create CharactersList component\"\n</code></pre>"},{"location":"version-0.3.0/#creation-du-composant-numberofcharacters","title":"Cr\u00e9ation du composant NumberOfCharacters","text":"<p>Nous allons cr\u00e9er un composant <code>NumberOfCharacters</code> qui permet d'afficher le nombre de charact\u00e8res et de g\u00e9rer le cas o\u00f9 il n'y a aucun charact\u00e8re.</p> <p>Cr\u00e9er le fichier <code>src/components/NumberOfCharacters.js</code> avec le contenu suivant :</p> <pre><code>export function NumberOfCharacters({ characters }) {\n    if (characters.length === 0) {\n      return &lt;p&gt;There is no characters&lt;/p&gt;;\n    }\n\n    return &lt;p&gt;There is {characters.length} characters&lt;/p&gt;;\n}\n</code></pre> <p>Modifier le fichier <code>App.js</code> pour utiliser le composant <code>NumberOfCharacters</code> :</p> <pre><code>import './style.css';\nimport { CharactersList } from './components/CharactersList';\nimport { NumberOfCharacters } from './components/NumberOfCharacters';\n\nconst characters = require('./data/characters.json');\n\nfunction App() {\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Marvel Characters&lt;/h1&gt;\n      &lt;CharactersList characters={characters} /&gt;\n      &lt;br /&gt;\n      &lt;NumberOfCharacters characters={characters} /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"version-0.3.0/#validation-des-composants","title":"Validation des composants","text":"<p>Afin de tester le cas o\u00f9 il n'y a aucun charact\u00e8re, il y a trois possibilit\u00e9s :</p> <ul> <li>supprimer tous les charact\u00e8res du fichier <code>characters.json</code></li> <li>modifier le fichier <code>App.js</code> pour utiliser une liste vide</li> <li>ne pas passer de liste de charact\u00e8res aux composants <code>CharactersList</code> et <code>NumberOfCharacters</code></li> </ul> <p>Les deux premi\u00e8res solutions sont \u00e9quivalentes, car dans les deux cas, le composant re\u00e7oit une liste vide. Par contre la troisi\u00e8me solution permet de tester le cas o\u00f9 le composant est utilis\u00e9 sans liste de charact\u00e8res. Et nous allons constater que les composants ne g\u00e8re pas ce cas.</p> <p>Nous verrons plus tard comment tester, via du code, les composants react, et ainsi valider que l'on g\u00e8re bien tous les cas.</p> <p>Si l'on ne passe pas de liste de charact\u00e8res aux composants <code>NumberOfCharacters</code> et <code>CharactersList</code>, nous obtenons des erreurs dans la console du navigateur, qui sont aussi visibles dans la page web, car react en mode d\u00e9veloppement affiche les erreurs dans la page web.</p> <pre><code>Cannot read properties of undefined (reading 'map')\n\nCannot read properties of undefined (reading 'length')\n</code></pre> <p>Ces erreurs sont dues au fait que nous essayons d'appeler les fonctions <code>map</code> et <code>length</code> sur une liste qui n'existe pas. Nous devons donc g\u00e9rer le cas o\u00f9 la liste de charact\u00e8res n'existe pas. Pour cela, nous allons modifier les composants <code>NumberOfCharacters</code> et <code>CharactersList</code> en ajoutant une valeur par d\u00e9faut pour la liste de charact\u00e8res.</p> <p>Modifier le fichier <code>src/components/CharactersList.js</code> pour ajouter une valeur par d\u00e9faut pour la liste de charact\u00e8res :</p> <pre><code>export function CharactersList({ characters = [] }) {\n  return (\n    &lt;ul id=\"characters\"&gt;\n      {characters.map((character) =&gt; (\n        &lt;li key={character.id}&gt;{character.name}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Modifier le fichier <code>src/components/NumberOfCharacters.js</code> pour ajouter une valeur par d\u00e9faut pour la liste de charact\u00e8res :</p> <pre><code>export function NumberOfCharacters({ characters = [] }) {\n    if (characters.length === 0) {\n      return &lt;p&gt;There is no characters&lt;/p&gt;;\n    }\n\n    return &lt;p&gt;There is {characters.length} characters&lt;/p&gt;;\n}  \n</code></pre> <p>Nous avons maintenant deux composants <code>CharactersList</code> et <code>NumberOfCharacters</code> qui permettent d'afficher la liste des charact\u00e8res, le nombre de charact\u00e8res et de g\u00e9rer le cas o\u00f9 il n'y a aucun charact\u00e8re. Nous pouvons donc commiter les modifications avec la commande suivante :</p> <pre><code>git add .\ngit commit -m \"Create NumberOfCharacters component and fix CharactersList component\"\n</code></pre>"},{"location":"version-0.3.0/#mise-a-jour-des-branches","title":"Mise \u00e0 jour des branches","text":"<p>Nous avons maintenant une application react fonctionnelle. Nous pouvons merger la branche <code>feature/react</code> dans la branche <code>develop</code>, et pousser les modifications sur GitHub.</p> <p>Merge de la branche feature/react dans la branche develop</p> <p>Basculer sur la branche <code>develop</code> et r\u00e9cup\u00e9rer les \u00e9ventuelles modifications avec la commande suivante :</p> <pre><code>git switch develop\ngit pull\n</code></pre> <p>Merger la branche <code>feature/react</code> dans la branche <code>develop</code> et pousser les modifications sur GitHub avec la commande suivante : <pre><code>git merge feature/react\ngit push\n</code></pre></p> <p>Supprimer la branche locale <code>feature/react</code> avec la commande suivante :</p> <pre><code>git branch -d feature/react\n</code></pre> <p>Cette version de l'application est disponible sur la branche <code>develop</code> du d\u00e9p\u00f4t GitHub. </p> <p>Bien que l'on ait effectu\u00e9 plusieurs commits, mais un seul push, on constate bien que l'historique de commit est conserv\u00e9 sur GitHub.</p> <p></p> <p>Merge de la branche develop dans la branche main</p> <p>Merger la branche <code>develop</code> dans la branche <code>main</code> et pousser les modifications sur GitHub avec la commande suivante :</p> <pre><code>git switch main\ngit pull\ngit merge develop\ngit push\n</code></pre>"},{"location":"version-0.3.0/#tag-de-la-version-030","title":"Tag de la version 0.3.0","text":"<p>Cr\u00e9er le tag <code>v0.3.0</code> et le pousser sur GitHub avec les commandes suivantes :</p> <pre><code>git tag v0.3.0 -m \"version 0.3.0\"\ngit push origin v0.3.0\n</code></pre>"},{"location":"version-0.4.0/","title":"Version 0.4.0","text":""},{"location":"version-0.4.0/#objectifs","title":"Objectifs","text":"<ul> <li>cr\u00e9ation de plusieurs pages (Home, About, Contact)</li> <li>utilisation de react-router pour g\u00e9rer la navigation entre les pages</li> <li>mise en oeuvre d'un layout pour les pages (header, footer, etc...)</li> </ul> <p>Flow git de la version 0.4.0 :</p> <pre><code>gitGraph\n    checkout main\n    commit tag: \"v0.3.0\"\n    branch develop\n    checkout develop\n    branch feature-routers\n    checkout feature-routers\n    commit id:\"Add react-router\"\n    checkout develop\n    merge feature-routers\n    checkout main\n    merge develop\n    commit tag: \"v0.4.0\"</code></pre> <p>Basculer sur la branche <code>develop</code> et cr\u00e9er une nouvelle branche <code>feature/routers</code> \u00e0 partir de la branche <code>develop</code>.</p> <pre><code>git switch develop\ngit pull\ngit switch -c feature/routers\n</code></pre>"},{"location":"version-0.4.0/#creation-de-pages","title":"Cr\u00e9ation de pages","text":"<p>Une page n'est rien d'autre qu'un composant React. Nous allons donc cr\u00e9er un composant pour chaque page.</p>"},{"location":"version-0.4.0/#aboutpage","title":"AboutPage","text":"<p>Cr\u00e9er un fichier <code>src/pages/AboutPage.js</code> avec le contenu suivant :</p> <pre><code>import React from 'react';\n\nconst AboutPage = () =&gt; {\n    // change the title of the page\n    document.title = \"About | Marvel App\";\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;About Us&lt;/h1&gt;\n            &lt;p&gt;We are a team of Marvel fans who love to create awesome apps!&lt;/p&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default AboutPage;\n</code></pre> <p>La page <code>AboutPage</code> est une page statique. Elle affiche simplement un titre et un paragraphe et modifie le titre de la page.</p>"},{"location":"version-0.4.0/#contactpage","title":"ContactPage","text":"<p>Cr\u00e9er un fichier <code>src/pages/ContactPage.js</code> avec le contenu suivant :</p> <pre><code>import React from 'react';\n\nconst ContactPage = () =&gt; {\n    // change the title of the page\n    document.title = \"Contact | Marvel App\";\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;Contact Us&lt;/h1&gt;\n            &lt;p&gt;\n                Feel free to contact us at &lt;a href=\"mailto:marvelApp@gmail.com\"&gt;marvelApp@gmail.com&lt;/a&gt;\n            &lt;/p&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default ContactPage;\n</code></pre> <p>Comme pour la page <code>AboutPage</code>, la page <code>ContactPage</code> est une page statique. Elle affiche simplement un titre et un paragraphe et modifie le titre de la page.</p>"},{"location":"version-0.4.0/#characterspage","title":"CharactersPage","text":"<p>Cr\u00e9er un fichier <code>src/pages/CharactersPage.js</code> avec le contenu suivant :</p> <pre><code>import React from 'react';\nimport { CharactersList } from \"../components/CharactersList\";\nimport { NumberOfCharacters } from \"../components/NumberOfCharacters\";\n\nconst characters = require('../data/characters.json');\n\nconst CharactersPage = () =&gt; {\n    // change the title of the page\n    document.title = \"Marvel App\";\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;Marvel Characters&lt;/h1&gt;\n            &lt;CharactersList characters={characters} /&gt;\n            &lt;br /&gt;\n            &lt;NumberOfCharacters characters={characters} /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default CharactersPage;\n</code></pre> <p>La page <code>CharactersPage</code> utilise les composants <code>CharactersList</code> et <code>NumberOfCharacters</code> et le fichier <code>characters.json</code>. Ceux-ci ne sont pas au m\u00eame niveau de l'arborescence que la page <code>CharactersPage</code>. Il faut donc remonter d'un niveau pour acc\u00e9der \u00e0 ces fichiers. </p> <p>Le chargement des personnages est pour l'instant statique, nous verrons plus tard comment charger les personnages depuis une API. Les donn\u00e9es sont ensuite pass\u00e9es aux composants <code>CharactersList</code> et <code>NumberOfCharacters</code> via des props.</p>"},{"location":"version-0.4.0/#utilisation-des-pages","title":"Utilisation des pages","text":"<p>Modifier le fichier <code>App.js</code> pour ajouter les pages <code>About</code>, <code>Contact</code> et <code>CharactersPage</code> :</p> <pre><code>import './style.css';\nimport AboutPage from './pages/AboutPage';\nimport ContactPage from './pages/ContactPage';\nimport CharactersPage from './pages/CharactersPage';\n\nfunction App() {\n\n  return (\n    &lt;&gt;\n      &lt;CharactersPage /&gt;\n      &lt;AboutPage /&gt;\n      &lt;ContactPage /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>On remarque que les pages sont affich\u00e9es les unes \u00e0 la suite des autres. Il faut donc ajouter un syst\u00e8me de navigation pour pouvoir afficher une seule page \u00e0 la fois.</p>"},{"location":"version-0.4.0/#navigation-entre-les-pages","title":"Navigation entre les pages","text":"<p>react-router est une librairie qui permet de g\u00e9rer la navigation entre les pages d'une application React.</p> <p>Quelques explications sur react-router, voir</p> <p>Pour la documentation officielle de react-router, voir</p> <p>Installer react-router avec la commande suivante :</p> <pre><code>npm install react-router-dom\n</code></pre>"},{"location":"version-0.4.0/#layout","title":"Layout","text":"<p>Chaque page ayant des \u00e9l\u00e9ments en commun (en-t\u00eate, pied de page, etc...), nous allons cr\u00e9er un composant <code>Layout</code> qui va contenir ces \u00e9l\u00e9ments communs.</p> <p>Cr\u00e9er un fichier <code>src/Layout.js</code> avec le contenu suivant :</p> <pre><code>import React from 'react';\n\nconst Layout = ({ children }) =&gt; {\n    return (\n        &lt;&gt;\n            &lt;header&gt;\n                &lt;h1&gt;Marvel App&lt;/h1&gt;\n                &lt;nav&gt;\n                    &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n                    &lt;a href=\"/about\"&gt;About&lt;/a&gt;\n                    &lt;a href=\"/contact\"&gt;Contact&lt;/a&gt;\n                &lt;/nav&gt;\n            &lt;/header&gt;\n            &lt;main&gt;\n                {children}\n            &lt;/main&gt;\n            &lt;footer&gt;\n                &lt;p&gt;Marvel App - 2023&lt;/p&gt;\n            &lt;/footer&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default Layout;\n</code></pre> <p>On remarque que le composant <code>Layout</code> prend en param\u00e8tre un \u00e9l\u00e9ment <code>children</code>. Cet \u00e9l\u00e9ment sera remplac\u00e9 par le contenu de la page.</p> <p>Modifier le fichier <code>App.js</code> pour utiliser le composant <code>Layout</code> :</p> <pre><code>import './style.css';\n\nimport Layout from './Layout';\n\nimport AboutPage from './pages/AboutPage';\n\nimport ContactPage from './pages/ContactPage';\n\nimport CharactersPage from './pages/CharactersPage';\n\nfunction App() {\n\n  return (\n    &lt;Layout&gt;\n      &lt;CharactersPage /&gt;\n      &lt;AboutPage /&gt;\n      &lt;ContactPage /&gt;\n    &lt;/Layout&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Ce n'est pas encore parfait, car toutes les pages sont affich\u00e9es en m\u00eame temps. C'est l\u00e0 qu'intervient react-router.</p>"},{"location":"version-0.4.0/#router","title":"Router","text":"<p>Afin de g\u00e9rer la navigation entre les pages en fonction de l'URL (route), nous allons cr\u00e9er un composant <code>Router</code> qui va utiliser react-router. Nous allons d\u00e9finir les routes dans un fichier <code>routes.js</code>.</p> <p>Cr\u00e9er un fichier <code>src/routes.js</code> avec le contenu suivant :</p> <pre><code>import Layout from \"./Layout\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ContactPage from \"./pages/ContactPage\";\nimport CharactersPage from \"./pages/CharactersPage\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;Layout /&gt;,\n        children: [\n            { path: \"/\", element: &lt;CharactersPage /&gt; },\n            { path: \"/about\", element: &lt;AboutPage /&gt; },\n            { path: \"/contact\", element: &lt;ContactPage /&gt; },\n        ],\n    },\n];\n\nexport default routes;\n</code></pre> <p>On remarque que nous avons d\u00e9fini un \u00e9l\u00e9ment <code>Layout</code> comme \u00e9l\u00e9ment racine de notre application. Cet \u00e9l\u00e9ment <code>Layout</code> va donc \u00eatre affich\u00e9 \u00e0 chaque fois que l'URL correspond \u00e0 une des routes d\u00e9finies.</p> <p>Remplacer le contenu du fichier <code>Layout.js</code> par le contenu suivant :</p> <pre><code>import React from 'react';\nimport { Outlet } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Layout = () =&gt; {\n    return (\n        &lt;&gt;\n            &lt;header&gt;\n                &lt;h1&gt;Marvel App&lt;/h1&gt;\n                &lt;nav&gt;\n                    &lt;NavLink to=\"/\"&gt;Home&lt;/NavLink&gt; - &lt;NavLink to=\"/about\"&gt;About&lt;/NavLink&gt; - &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n                &lt;/nav&gt;\n            &lt;/header&gt;\n            &lt;main&gt;\n                &lt;Outlet /&gt;\n            &lt;/main&gt;\n            &lt;footer&gt;\n                &lt;p&gt;Marvel App - 2023&lt;/p&gt;\n            &lt;/footer&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default Layout;\n</code></pre> <p>Dans cette nouvelle version du composant <code>Layout</code>, nous utilisons le composant <code>Outlet</code> de react-router \u00e0 la place de <code>children</code>. Ce composant va afficher le contenu de la page en fonction de l'URL. </p> <p>Nous utilisons \u00e9galement le composant <code>NavLink</code> de react-router pour cr\u00e9er des liens entre les pages, ce composant va ajouter la classe <code>active</code> sur le lien correspondant \u00e0 la page affich\u00e9e. Nous pourrons donc ajouter un style pour mettre en \u00e9vidence le lien actif.</p> <p>De plus les liens cr\u00e9\u00e9s par le composant <code>NavLink</code> ou <code>Link</code> vont utiliser le router de react-router, ce qui va permettre de naviguer entre les pages sans recharger la page.</p> <p>Remplacer le contenu du fichier <code>App.js</code> par le contenu suivant :</p> <pre><code>import './style.css';\nimport { RouterProvider, createBrowserRouter } from 'react-router-dom';\n\nimport routes from './routes';\n\n// Create a router that uses the client side history strategy for\nconst router = createBrowserRouter(routes)\n\nfunction App() {\n\n  return (\n    &lt;RouterProvider router={router} /&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Afin d'utiliser react-router, nous devons cr\u00e9er un router qui va utiliser les routes d\u00e9finies dans le fichier <code>routes.js</code>. Nous utilisons le composant <code>RouterProvider</code> de react-router pour fournir le router \u00e0 l'application. Nous utilisons \u00e9galement le composant <code>createBrowserRouter</code> de react-router pour cr\u00e9er le router.</p> <p>Nous avons maintenant une application avec plusieurs pages et une navigation entre ces pages. Nous allons devoir modifier le style de l'application pour am\u00e9liorer l'exp\u00e9rience utilisateur. Par exemple, nous pourrions ajouter un style pour mettre en \u00e9vidence le lien actif. Ainsi qu'un style pour positionner le footer en bas de la page.</p> <p>De plus ayant maintenant un header de navigation, l'\u00e9l\u00e9ment <code>h1</code> de chaque page n'est plus du bon niveau de titre. Nous allons donc devoir modifier le niveau de titre de chaque page.</p> style.csspages/CharactersPage.jspages/AboutPage.jspages/ContactPage.js <pre><code>body {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0; \n}\n\nh1 {\n    margin: 0;\n    padding: 20px;\n    background: #333;\n    color: #fff;\n    text-align: center;\n}\n\nul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\nli {\n    padding: 10px;\n    border-bottom: 1px solid #ccc;\n}\n\na.active {\n    color: red;\n} \n\nfooter {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 20px;\n    background: #333;\n    color: #fff;\n    text-align: center;\n    padding: 20px;\n}\n</code></pre> <pre><code>import React from 'react';\nimport { CharactersList } from \"../components/CharactersList\";\nimport { NumberOfCharacters } from \"../components/NumberOfCharacters\";\n\nconst characters = require('../data/characters.json');\n\nconst CharactersPage = () =&gt; {\n    // change the title of the page\n    document.title = \"Marvel App\";\n\n    return (\n        &lt;&gt;\n            &lt;h2&gt;Marvel Characters&lt;/h2&gt;\n            &lt;CharactersList characters={characters} /&gt;\n            &lt;br /&gt;\n            &lt;NumberOfCharacters characters={characters} /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default CharactersPage;\n</code></pre> <pre><code>import React from 'react';\n\nconst AboutPage = () =&gt; {\n    // change the title of the page\n    document.title = \"About | Marvel App\";\n\n    return (\n        &lt;&gt;\n            &lt;h2&gt;About Us&lt;/h2&gt;\n            &lt;p&gt;We are a team of Marvel fans who love to create awesome apps!&lt;/p&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default AboutPage;\n</code></pre> <pre><code>import React from 'react';\n\nconst ContactPage = () =&gt; {\n    // change the title of the page\n    document.title = \"Contact | Marvel App\";\n\n    return (\n        &lt;&gt;\n            &lt;h2&gt;Contact Us&lt;/h2&gt;\n            &lt;p&gt;\n                Feel free to contact us at &lt;a href=\"mailto:marvelApp@gmail.com\"&gt;marvelApp@gmail.com&lt;/a&gt;\n            &lt;/p&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default ContactPage;\n</code></pre> <p>Commiter les modifications :</p> <pre><code>git add .\n\ngit commit -m \"Add react-router\"\n</code></pre>"},{"location":"version-0.4.0/#merge-de-la-branche-featurerouters-dans-la-branche-develop","title":"Merge de la branche <code>feature/routers</code> dans la branche <code>develop</code>","text":"<p>Merger la branche <code>feature/routers</code> dans la branche <code>develop</code>, supprimer la branche <code>feature/routers</code> et pousser les modifications sur le repository distant. </p> <pre><code>git switch develop\n\ngit merge feature/routers\n\ngit branch -d feature/routers\n\ngit push\n</code></pre>"},{"location":"version-0.4.0/#merge-de-la-branche-develop-dans-la-branche-main","title":"Merge de la branche <code>develop</code> dans la branche <code>main</code>","text":"<p>Merger la branche <code>develop</code> dans la branche <code>main</code> et pousser les modifications sur le repository distant.</p> <pre><code>git switch main\n\ngit merge develop\n\ngit push\n</code></pre>"},{"location":"version-0.4.0/#tag-de-la-version-040","title":"Tag de la version 0.4.0","text":"<pre><code>git tag v0.4.0 -m \"version 0.4.0\"\ngit push origin v0.4.0\n</code></pre>"},{"location":"version-0/","title":"Version 0.*","text":"<ul> <li>Version 0.1.0, contenu statique HTML, CSS</li> <li>Version 0.2.0, contenu dynamique avec JavaScript, utilisation des branches Git</li> <li>Version 0.3.0, transformation en application React</li> <li>Version 0.4.0, utilisation de react-router</li> </ul>"},{"location":"version-1.0.0/","title":"Version 1.0.0","text":""},{"location":"version-1.0.0/#objectifs","title":"Objectifs","text":"<ul> <li>Cr\u00e9ation de la page de d\u00e9tail d'un charact\u00e8re</li> <li>S\u00e9curisation du projet<ul> <li>Cr\u00e9ation d'un workflow pour v\u00e9rifier que le code build</li> <li>Protection des branches <code>main</code> et <code>develop</code></li> </ul> </li> <li>Cr\u00e9ation de pull request pour valider les modifications</li> <li>Cr\u00e9ation d'une release 1.0.0 et d\u00e9ploiement de l'application</li> </ul> <p>Flow git de la version 1.0.0 :</p> <pre><code>gitGraph\n    checkout main\n    commit tag: \"v0.4.0\"\n    branch develop\n    checkout develop\n    branch feature-character-detail\n    checkout feature-character-detail\n    commit id:\"page\"\n    commit id:\"workflow\"\n    checkout develop\n    merge feature-character-detail\n    branch release-1.0.0\n    checkout release-1.0.0\n    commit id:\"1.0.0.rc1\"\n    commit id:\"doc\"\n    commit id:\"redirects\"\n    commit id:\"1.0.0.rc2\"\n    commit id:\"1.0.0\"\n    checkout main\n    merge release-1.0.0\n    commit tag: \"v1.0.0\"\n    checkout develop\n    merge main</code></pre> <p>Afin de recetter et d\u00e9ployer \"officiellement\" la version 1.0.0, nous allons utiliser le service cloud netlify.</p> <p>Gestion des num\u00e9ros de version</p> <p>Nous passons de 0.4.0 \u00e0 1.0.0, modification de num\u00e9ro de version majeure. L'application en version 1.0.0 est une application fonctionnelle et stable, elle peut \u00eatre utilis\u00e9e en production.</p> <p>Nous utilisons la convention de num\u00e9rotation semver. Cette convention permet de d\u00e9finir le num\u00e9ro de version d'un projet. Le num\u00e9ro de version est compos\u00e9 de 3 nombres s\u00e9par\u00e9s par des points :</p> <ul> <li>le premier nombre est le num\u00e9ro de version majeure</li> <li>le deuxi\u00e8me nombre est le num\u00e9ro de version mineure</li> <li>le troisi\u00e8me nombre est le num\u00e9ro de version de patch</li> </ul> <p>Le concept de version majeure, mineure et de patch est utilis\u00e9 pour d\u00e9finir la compatibilit\u00e9 des versions entre elles dans le cadre de d\u00e9pendances entre projets. Il est utilis\u00e9 pour des composants de type librairie ou framework, ou encore pour des projets de type API. </p> <p>Dans le cadre d'un projet web, il n'y a pas cette contrainte de d\u00e9pendances entre projets. Cependant, il est int\u00e9ressant d'utiliser cette convention pour d\u00e9finir les grandes fonctionnalit\u00e9s de l'application. </p> <ul> <li>Le num\u00e9ro de version majeure permet de mettre en avant la mise \u00e0 disposition de nouvelles grandes fonctionnalit\u00e9s de l'application. </li> <li>Le num\u00e9ro de version mineure permet de mettre en avant la mise \u00e0 disposition de nouvelles fonctionnalit\u00e9s plus petites de l'application.</li> <li>Le num\u00e9ro de version de patch permet de mettre en avant la mise \u00e0 disposition de corrections de bugs de l'application.</li> </ul>"},{"location":"version-1.0.0/#creation-de-la-page-de-detail-dun-charactere","title":"Cr\u00e9ation de la page de d\u00e9tail d'un charact\u00e8re","text":"<p>Cr\u00e9er une branche <code>feature/character-detail</code> avec la commande suivante :</p> <pre><code>git switch develop\ngit switch -c feature/character-detail\n</code></pre>"},{"location":"version-1.0.0/#character-api","title":"character-api","text":"<p>Cr\u00e9er un fichier <code>src/api/character-api.js</code> avec le contenu suivant :</p> <pre><code>const characters = require('../data/characters.json');\n\n/**\n * Get all characters from json file\n * @returns \n */\nfunction getCharacters() {\n    return characters\n}\n\n/**\n * Get character by id\n * @param {number} id \n * @returns \n */\nfunction getCharacterById(id) {\n    const character = characters.find((character) =&gt; character.id === id)\n    if (!character) {\n        throw new Error(`Character with id ${id} not found`)\n    }\n    return character\n}\n\nmodule.exports = {\n    getCharacters,\n    getCharacterById\n}\n</code></pre> <p>L'api <code>character-api</code> permet de r\u00e9cup\u00e9rer les donn\u00e9es des personnages. Nous allons utiliser les donn\u00e9es du fichier <code>src/data/characters.json</code>. Nous cr\u00e9ons deux fonctions :</p> <ul> <li><code>getCharacters</code> : permet de r\u00e9cup\u00e9rer tous les personnages</li> <li><code>getCharacterById</code> : permet de r\u00e9cup\u00e9rer un personnage par son id</li> </ul> <p>Remarque : Il s'agit d'une version minimaliste d'une api pour illustrer la s\u00e9paration entre le code de l'application et les donn\u00e9es. Nous pourrons ainsi plus tard remplacer les donn\u00e9es par des donn\u00e9es provenant d'une api externe.</p> <p>Nous allons modifier le code de l'application pour utiliser cette api, et utiliser la fonctionnalit\u00e9 <code>loader</code> de react-router pour charger les donn\u00e9es avant d'afficher les pages. Cette fonctionnalit\u00e9 permet de s\u00e9parer le chargement des donn\u00e9es de l'affichage des pages.</p> <p>Modification de la d\u00e9finition des routes</p> <p>Modifier le fichier <code>src/routes.js</code> avec le contenu suivant :</p> <pre><code>import Layout from \"./Layout\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ContactPage from \"./pages/ContactPage\";\nimport CharactersPage from \"./pages/CharactersPage\";\n\nimport CharacterDetailPage from \"./pages/CharacterDetailPage\";\nimport { getCharacterById, getCharacters } from \"./api/character-api\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;Layout /&gt;,\n        children: [\n            {\n                path: \"/\",\n                element: &lt;CharactersPage /&gt;,\n                loader: () =&gt; getCharacters(),\n            },\n            {\n                path: \"/characters/:id\",\n                element: &lt;CharacterDetailPage /&gt;,\n                loader: ({ params }) =&gt; getCharacterById(params.id),\n            },\n            { \n                path: \"/about\", \n                element: &lt;AboutPage /&gt; \n            },\n            { \n                path: \"/contact\", \n                element: &lt;ContactPage /&gt; \n            },\n        ],\n    },\n];\n\nexport default routes;\n</code></pre> <p>Nous avons ajout\u00e9 la propri\u00e9t\u00e9 <code>loader</code> sur la route <code>/</code> pour charger les personnages avant d'afficher la page. </p> <p>Nous avons aussi ajout\u00e9 la route <code>/characters/:characterId</code> pour afficher la page de d\u00e9tail d'un personnage. Nous appelons les fonctions <code>getCharacters</code> et <code>getCharacterById</code> de notre api <code>character-api</code>.</p> <p>Modification de la page CharactersPage</p> <p>Modifier le fichier <code>src/pages/CharactersPage.js</code> avec le contenu suivant :</p> <pre><code>import React from 'react';\nimport { CharactersList } from \"../components/CharactersList\";\nimport { NumberOfCharacters } from \"../components/NumberOfCharacters\";\n\nimport { useLoaderData } from 'react-router';\n\nconst CharactersPage = () =&gt; {\n    // change the title of the page\n    document.title = \"Marvel App\";\n\n    // retrieve the characters using the useLoaderData hook\n    const characters = useLoaderData();\n\n    return (\n        &lt;&gt;\n            &lt;h2&gt;Marvel Characters&lt;/h2&gt;\n            &lt;CharactersList characters={characters} /&gt;\n            &lt;br /&gt;\n            &lt;NumberOfCharacters characters={characters} /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default CharactersPage;\n</code></pre> <p>Nous avons modifier le composant <code>CharactersPage</code> pour utiliser le hook <code>useLoaderData</code> de react-router. Ce hook permet de r\u00e9cup\u00e9rer les donn\u00e9es charg\u00e9es par la fonction <code>loader</code> de la route. Nous avons donc d\u00e9port\u00e9 le chargement des personnages dans la route <code>/</code> et nous r\u00e9cup\u00e9rons les personnages dans le composant <code>CharactersPage</code> avec le hook <code>useLoaderData</code>. </p> <p>Modification du composant CharactersList</p> <p>Modifier le fichier <code>src/components/CharactersList.js</code> avec le contenu suivant :</p> <pre><code>import { Link } from \"react-router-dom\";\n\nexport function CharactersList({ characters = [] }) {\n    return (\n        &lt;ul id=\"characters\"&gt;\n            {characters.map((character) =&gt; (\n                &lt;li key={character.id}&gt;\n                    &lt;Link to={`/characters/${character.id}`}&gt;\n                        {character.name}\n                    &lt;/Link&gt;\n                &lt;/li&gt;\n            ))}\n        &lt;/ul&gt;\n    );\n}\n</code></pre> <p>Nous avons modifi\u00e9 le composant <code>CharactersList</code> pour ajouter un lien vers la page de d\u00e9tail d'un personnage. Nous utilisons la propri\u00e9t\u00e9 <code>id</code> du personnage pour construire l'url de la page de d\u00e9tail du personnage.</p> <p>Modification du style</p> <p>Modifier le fichier <code>src/style.css</code> avec le contenu suivant :</p> <pre><code>```css\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    margin: 0;\n    padding: 20px;\n    background: #333;\n    color: #fff;\n    text-align: center;\n}\n\nul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\nli {\n    padding: 10px;\n    border-bottom: 1px solid #ccc;\n}\n\nli a {\n    color: #333;\n    text-decoration: none;\n}\n\na.active {\n    color: red;\n}\n\nfooter {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 20px;\n    background: #333;\n    color: #fff;\n    text-align: center;\n    padding: 20px;\n}\n</code></pre> <p>Nous avons moidifi\u00e9 les styles pour le \u00e9l\u00e9ments de type lien, afin d'avoir un style diff\u00e9rent entre les liens du menu et les liens de la liste des personnages</p> <p>Modification des donn\u00e9es</p> <p>Afin d'afficher les d\u00e9tails d'un charact\u00e8re nous allons ajouter des donn\u00e9es dans le fichier <code>data/characters.json</code></p> <pre><code>[\n    {\n        \"id\": \"1009175\",\n        \"name\": \"Beast\",\n        \"description\": \"\",\n        \"modified\": \"2014-01-13T14:48:32-0500\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/2/80/511a79a0451a3\",\n            \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1009220\",\n        \"name\": \"Captain America\",\n        \"description\": \"Vowing to serve his country any way he could, young Steve Rogers took the super soldier serum to become America's one-man army. Fighting for the red, white and blue for over 60 years, Captain America is the living, breathing symbol of freedom and liberty.\",\n        \"modified\": \"2020-04-04T19:01:59-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/3/50/537ba56d31087\",\n            \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1009268\",\n        \"name\": \"Deadpool\",\n        \"modified\": \"2020-04-04T19:02:15-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/9/90/5261a86cacb99\",\n            \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1010743\",\n        \"name\": \"Groot\",\n        \"description\": \"\",\n        \"modified\": \"2013-10-17T15:01:37-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/3/10/526033c8b474a\",\n            \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1009351\",\n        \"name\": \"Hulk\",\n        \"description\": \"Caught in a gamma bomb explosion while trying to save the life of a teenager, Dr. Bruce Banner was transformed into the incredibly powerful creature called the Hulk. An all too often misunderstood hero, the angrier the Hulk gets, the stronger the Hulk gets.\",\n        \"modified\": \"2020-07-21T10:35:15-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/5/a0/538615ca33ab0\",\n            \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1009368\",\n        \"name\": \"Iron Man\",\n        \"description\": \"Wounded, captured and forced to build a weapon by his enemies, billionaire industrialist Tony Stark instead created an advanced suit of armor to save his life and escape captivity. Now with a new outlook on life, Tony uses his money and intelligence to make the world a safer, better place as Iron Man.\",\n        \"modified\": \"2016-09-28T12:08:19-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/9/c0/527bb7b37ff55\",\n            \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1010744\",\n        \"name\": \"Rocket Raccoon\",\n        \"description\": \"A genetically-engineered alien with a knack for big guns and fast ships, Rocket serves as the backbone of the Guardians of the Galaxy!\",\n        \"modified\": \"2014-07-17T17:32:43-0400\",\n        \"thumbnail\": {\n          \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/9/b0/50fec1e49298a\",\n          \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1009592\",\n        \"name\": \"Silver Surfer\",\n        \"description\": \"When Zenn-La was threatened by the world-devouring entity known as Galactus, Norrin Radd stood up for his home planet and offered to work for Galactus, finding him new planets to eat, in exchange for saving his own. Years later, the Surfer has protected Earth and many other planets, becoming one of the greatest heroes in the universe.\",\n        \"modified\": \"2013-11-07T10:48:53-0500\",\n        \"thumbnail\": {\n          \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/3/50/527bb6490a176\",\n          \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1009697\",\n        \"name\": \"Thanos\",\n        \"modified\": \"2016-05-05T15:35:19-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/6/40/5274137e3e2cd\",\n            \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1009663\",\n        \"name\": \"Thor\",\n        \"modified\": \"2020-03-11T10:18:57-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/d/d0/5269657a74350\",\n            \"extension\": \"jpg\"\n        }\n    },\n    {\n        \"id\": \"1009718\",\n        \"name\": \"Wolverine\",\n        \"modified\": \"2016-05-02T12:21:44-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/2/60/537bcaef0f6cf\",\n            \"extension\": \"jpg\"\n        }\n    }\n]\n</code></pre>"},{"location":"version-1.0.0/#characterdetailpage","title":"CharacterDetailPage","text":"<p>Cr\u00e9er un fichier <code>src/pages/CharacterDetailPage.js</code> avec le contenu suivant :</p> <pre><code>import React, { useEffect } from 'react';\n\nimport { useLoaderData } from 'react-router';\nimport CharacterDetail from '../components/CharacterDetail';\n\nconst CharacterDetailPage = () =&gt; {\n    // retrieve the character using the useLoaderData hook\n    const character = useLoaderData();\n\n    useEffect(() =&gt; {\n        document.title = `${character.name} | Marvel App`;\n    }, [character]);\n\n    return (\n        &lt;&gt;\n            &lt;CharacterDetail character={character} /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default CharacterDetailPage;\n</code></pre> <p>Nous avons cr\u00e9\u00e9 la page <code>CharacterDetailPage</code> qui affiche le d\u00e9tail d'un personnage. Nous utilisons le hook <code>useLoaderData</code> pour r\u00e9cup\u00e9rer le personnage charg\u00e9 par la fonction <code>loader</code> de la route. Nous utilisons le hook <code>useEffect</code> pour mettre \u00e0 jour le titre de la page web avec le nom du personnage. Nous utilisons le composant <code>CharacterDetail</code> pour afficher le d\u00e9tail du personnage.</p>"},{"location":"version-1.0.0/#characterdetail","title":"CharacterDetail","text":"<p>Cr\u00e9er un fichier <code>src/components/CharacterDetail.js</code> avec le contenu suivant :</p> <p><pre><code>function CharacterDetail({ character = {} }) {\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;{character.name}&lt;/h2&gt;\n            {\n                // if character.thumbnail is not null, then render the image\n                character.thumbnail &amp;&amp; &lt;img src={`${character.thumbnail.path}/standard_large.${character.thumbnail.extension}`} alt={character.name} /&gt;\n            }\n            &lt;p&gt;{character.description}&lt;/p&gt;\n            &lt;p&gt;{character.modified}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default CharacterDetail;\n</code></pre> Nous affichons le nom, la description, la date de modification et l'image du personnage. L'api peut ne pas renvoyer l'image du personnage, nous v\u00e9rifions donc que la propri\u00e9t\u00e9 <code>thumbnail</code> n'est pas nulle avant d'afficher l'image afin d'\u00e9viter une erreur.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add .\ngit commit -m \"Add character detail page\"\ngit push --set-upstream origin feature/character-detail\n</code></pre>"},{"location":"version-1.0.0/#securisation-du-projet","title":"S\u00e9curisation du projet","text":"<p>Afin de s\u00e9curiser le projet, nous allons mettre en place des contr\u00f4les avant de valider les modifications appport\u00e9es au code source des branches <code>main</code> et <code>develop</code>:</p> <ul> <li>contr\u00f4le que le code build correctement et que la qualit\u00e9 du code est suffisante (version basique que nous am\u00e9liorerons plus tard)</li> <li>contr\u00f4le que les modifications sont valid\u00e9es par un autre d\u00e9veloppeur avant d'\u00eatre int\u00e9gr\u00e9es au projet</li> </ul>"},{"location":"version-1.0.0/#creaction-dun-wokflow-pour-verifier-que-le-code-build","title":"Cr\u00e9action d'un wokflow pour v\u00e9rifier que le code build","text":"<p>github permet d'automatiser certaines t\u00e2ches gr\u00e2ce aux <code>workflows</code> et de r\u00e9agir \u00e0 certains \u00e9v\u00e9nements comme un <code>push</code> ou une <code>pull request</code>. Les executions du workflow sont visibles dans l'onglet <code>Actions</code> du repository.</p> <p>Quelques explications sur les actions, voir.</p> <p>Cr\u00e9er un fichier <code>.github/workflows/build.yml</code> avec le contenu suivant :</p> <pre><code>name: Build\n\non:\n  push:\n  pull_request:\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 18\n        cache: 'npm'\n    - run: npm ci\n    - run: npm run build\n</code></pre> <p>Ce workflow permet de v\u00e9rifier que le code build. Il est d\u00e9clench\u00e9 \u00e0 chaque push et \u00e0 chaque pull request quelque soit la branche. Il est compos\u00e9 d'un seul job <code>build</code> qui s'ex\u00e9cute sur une machine virtuelle <code>ubuntu-latest</code>. Le job est compos\u00e9 de 4 \u00e9tapes :</p> <ul> <li><code>checkout</code> : permet de r\u00e9cup\u00e9rer le code source du projet</li> <li><code>setup-node</code> : permet d'installer la version 18 de node.js et de restaurer le cache npm</li> <li><code>npm ci</code> : permet d'installer les d\u00e9pendances du projet </li> <li><code>npm run build</code> : permet de lancer le build du projet</li> </ul> <p>Pour un projet cr\u00e9\u00e9 avec <code>react-create-app</code>, le build g\u00e9n\u00e8re le livrable mais permet aussi de v\u00e9rifier que le code est valide et qu'il n'y a pas d'erreur de syntaxe. En cas d'erreur, le build \u00e9choue. Les warnings affich\u00e9s dans la console lorsque l'on lance <code>npm run start</code> qui ne sont pas bloquant durant le d\u00e9veloppement deviennent bloquant lors du build en production. Cela permet de s'assurer que le code est valide.</p> <p>Une fois le workflow cr\u00e9\u00e9, nous pouvons le tester en modifiant le code source et en poussant les modifications sur GitHub. </p> <p>Commiter et pusher les modifications :</p> <pre><code>git add .\ngit commit -m \"Add build workflow\"\ngit push\n</code></pre> <p>Le r\u00e9sultat du workflow est visible sur la page des actions du projet sur GitHub.</p> <p>Si le workflow \u00e9choue, il est possible de voir les logs d'ex\u00e9cution du workflow en cliquant sur le nom du workflow dans la page des actions du projet sur GitHub. Cela permet de voir les erreurs et de les corriger ensuite en local avant de pousser les modifications sur GitHub.</p>"},{"location":"version-1.0.0/#protection-des-branches-main-et-develop","title":"Protection des branches <code>main</code> et <code>develop</code>","text":"<p>Nous allons prot\u00e9ger les branches <code>main</code> et <code>develop</code> :</p> <ul> <li>afin d'\u00e9viter de les modifier directement et de forcer l'utilisation des pull requests</li> <li>afin de mettre en oeuvre la revue de code</li> <li>afin de v\u00e9rifier que le code pouss\u00e9 sur ces branches build correctement</li> </ul> <p>Pour les explications sur la protection des branches, voir.</p>"},{"location":"version-1.0.0/#pull-request","title":"Pull request","text":"<p>La Pull Request est une fonctionnalit\u00e9 de GitHub qui permet de proposer la validation de modifications du code source d'un projet. </p> <p>La pull request va permettre de discuter des modifications propos\u00e9es avant de les int\u00e9grer au projet, de mettre en oeuvre la revue de code, pratique qui consiste \u00e0 faire relire son code par un autre d\u00e9veloppeur. Cela permet de s'assurer de la qualit\u00e9 du code et de partager les connaissances entre les d\u00e9veloppeurs. La revue de code est une pratique tr\u00e8s r\u00e9pandue dans les entreprises.</p> <p>Quelques expliquations sur les pull requests, voir.</p>"},{"location":"version-1.0.0/#creation-de-la-pull-request","title":"Cr\u00e9ation de la pull request","text":"<p>Maintenant que nous avons termin\u00e9 la feature <code>character-detail</code> et prot\u00e9g\u00e9 les branches <code>main</code> et <code>develop</code>, nous allons proposer la validation de la feature au travers d'une pull request. Nous allons utiliser la fonctionnalit\u00e9 <code>compare</code> de GitHub pour comparer la branche <code>feature/character-detail</code> avec la branche <code>develop</code> et utiliser la fonctionnalit\u00e9 <code>create pull request</code> de GitHub pour cr\u00e9er la pull request.</p> <p></p> <p>Gr\u00e2ce \u00e0 la fonctionnalit\u00e9 <code>compare</code> de GitHub, nous pouvons voir les diff\u00e9rences entre les deux branches. Nous pouvons voir qu'il y a eu 2 commits sur la branche <code>feature/character-detail</code> et que 9 fichiers ont \u00e9t\u00e9 modifi\u00e9s. Nous pouvons voir les diff\u00e9rences entre les deux branches pour chaque fichier.</p> <p>Nous pouvons cr\u00e9er la pull request en cliquant sur le bouton <code>create pull request</code>.</p> <p></p> <p>Lors de la cr\u00e9ation de la pull request, nous allons utiliser la fonctionnalit\u00e9 <code>reviewers</code> de GitHub pour demander \u00e0 un autre d\u00e9veloppeur de relire notre code. Nous allons utiliser la fonctionnalit\u00e9 <code>assignees</code> de GitHub pour s'assigner la pull request. Nous allons utiliser la fonctionnalit\u00e9 <code>labels</code> de GitHub pour ajouter le label <code>enhancement</code> \u00e0 la pull request.</p> <p>Remarque : Pour pouvoir avoir acc\u00e8s \u00e0 la fonctionnalit\u00e9 <code>reviewers</code>, il faut que le d\u00e9veloppeur soit membre du projet. Pour cela, il faut que le d\u00e9veloppeur fasse une demande d'acc\u00e8s au projet. Le propri\u00e9taire du projet doit accepter la demande d'acc\u00e8s pour que le d\u00e9veloppeur devienne membre du projet. Ou bien, le propri\u00e9taire du projet peut ajouter le d\u00e9veloppeur comme membre du projet (Settings &gt;  Access &gt; Collaborators).</p> <p>Les pull requests sont visibles dans l'onglet <code>Pull requests</code> du repository. Nous pouvons voir la pull request que nous venons de cr\u00e9er.</p>"},{"location":"version-1.0.0/#validation-de-la-pull-request","title":"Validation de la pull request","text":"<p>Une fois l'ensemble des status checks pass\u00e9s, nous pouvons valider la pull request, en utilisant la fonctionnalit\u00e9 <code>merge pull request</code>. Nous pouvons voir que la pull request est valid\u00e9e et que le code est merg\u00e9 sur la branche <code>develop</code>.</p> <p></p>"},{"location":"version-1.0.0/#release","title":"Release","text":""},{"location":"version-1.0.0/#preparation","title":"Pr\u00e9paration","text":"<p>Le workflow de d\u00e9veloppement gitflow pr\u00e9voit la cr\u00e9ation d'une branche <code>release</code> \u00e0 partir de la branche <code>develop</code> pour pr\u00e9parer la mise en production d'une nouvelle version de l'application. Cette branche va permettre de tester l'application avant de la mettre en production, voir guide-git pour plus d'explications.</p> <p>Nous allons cr\u00e9er une branche <code>release/1.0.0</code> \u00e0 partir de la branche <code>develop</code> avec la commande suivante :</p> <pre><code>git switch develop\ngit switch -c release/1.0.0\n</code></pre>"},{"location":"version-1.0.0/#mise-a-jour-de-la-version","title":"Mise \u00e0 jour de la version","text":"<p>Nous allons modifier le fichier <code>package.json</code> pour mettre \u00e0 jour la version du projet, nous allons passer de la version <code>0.4.0</code> \u00e0 la version <code>1.0.0.rc1</code>.</p> <pre><code>{\n  \"name\": \"marvel-app\",\n  \"version\": \"1.0.0.rc1\",\n  ...\n}\n</code></pre> <p>Le <code>rc</code> signifie <code>release candidate</code>. Cela signifie que nous allons tester cette version avant de la mettre en production. Si cette version est valid\u00e9e, nous allons la mettre en production. Si cette version n'est pas valid\u00e9e, nous allons la corriger et cr\u00e9er une nouvelle version <code>1.0.0.rc2</code> par exemple.</p> <p>Une fois une version <code>rc*</code> valid\u00e9e, nous mettrons en production et supprimerons le <code>rc</code> pour avoir la version <code>1.0.0</code>.</p> <p>Commiter les modifications :</p> <pre><code>git add package.json\ngit commit -m \"Update version to rc1\"\ngit push --set-upstream origin release/1.0.0\n</code></pre>"},{"location":"version-1.0.0/#mise-a-jour-de-la-documentation","title":"Mise \u00e0 jour de la documentation","text":"<p>La phase de release est l'occasion de mettre \u00e0 jour la documentation. Nous allons ici mettre \u00e0 jour le fichier <code>README.md</code> pour indiquer comment installer et lancer l'application. Nous utilisons le format Markdown pour \u00e9crire le fichier <code>README.md</code>. Nous verrons plus tard comment utiliser Markdown.</p> <pre><code># Marvel App\n\n## Installation\n\ngit clone url-du-projet\ncd marvel-app\n\nnpm install\n\n## Lancement\n\nnpm start\n\nL'application est accessible \u00e0 l'adresse http://localhost:3000\n</code></pre> <p>Commiter et pusher les modifications :</p> <pre><code>git add README.md\ngit commit -m \"Update documentation\"\ngit push\n</code></pre> <p>La release est maintenant pr\u00eate \u00e0 \u00eatre d\u00e9ploy\u00e9e. C'est le moment de tester l'application et de v\u00e9rifier que tout fonctionne correctement gr\u00e2ce \u00e0 une recette utilisateur. La recette utilisateur est une phase de test manuel de l'application par les utilisateurs. C'est durant cette phase que nous allons d\u00e9tecter les \u00e9ventuels bugs et les corriger. C'est aussi durant cette phase que nous allons d\u00e9tecter les \u00e9ventuels probl\u00e8mes d'ergonomie et les corriger mais aussi d\u00e9tecter les \u00e9ventuels probl\u00e8mes de performance et les corriger.</p> <p>Si des bugs sont d\u00e9tect\u00e9s, ils seront corrig\u00e9s sur la branche <code>release/1.0.0</code>. Le num\u00e9ro de <code>rc</code> sera incr\u00e9ment\u00e9 pour indiquer qu'une nouvelle version release candidate est disponible.</p>"},{"location":"version-1.0.0/#deploiement-sur-netlify","title":"D\u00e9ploiement sur netlify","text":"<p>Nous allons d\u00e9ployer l'application sur netlify. netlify est un service cloud qui permet de d\u00e9ployer des applications web.</p> <p>Cr\u00e9er un compte sur netlify avec le compte GitHub.</p> <p>Dans la partie <code>Site Configuration/Build &amp; Deploy/Continuous Deployment</code>, dans la section <code>Branches and deploy contexts</code> cliquer sur <code>configure</code>. La Production branch doit \u00eatre <code>main</code> et <code>Any pull request again your production branch</code> doit \u00eatre coch\u00e9e.</p> <p>Cela va nous permettre d'avoir un d\u00e9ploiement automatique de l'application \u00e0 chaque push sur la branche <code>main</code> et \u00e0 chaque pull request sur la branche <code>main</code>. Nous pourrons ainsi avoir en parall\u00e8le la branche de production et les branches de \"recette\".</p>"},{"location":"version-1.0.0/#creation-de-la-pull-request-release100","title":"Cr\u00e9ation de la pull request release/1.0.0","text":"<p>Cr\u00e9er une pull request <code>release/1.0.0</code> \u00e0 partir de la branche <code>release/1.0.0</code> vers la branche <code>main</code>.</p> <p>Gr\u00e2ce \u00e0 la configuration ci-dessus, la cr\u00e9ation de la pull request <code>release/1.0.0</code> va d\u00e9clencher un d\u00e9ploiement de l'application sur netlify. Nous pourrons ainsi tester l'application avant de la mettre en production.</p> <p>netlify va mettre \u00e0 jour la pull request avec le lien vers l'application d\u00e9ploy\u00e9e.</p> <p>Afin d'avoir une application fonctionnelle, nous devons ajouter un fichier <code>_redirects</code> \u00e0 la racine du projet avec le contenu suivant:</p> <pre><code>/*    /index.html   200\n</code></pre> <p>Ce fichier permet de rediriger toutes les requ\u00eates vers la page <code>index.html</code> de l'application. Cela permet de g\u00e9rer les routes de l'application.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add _redirects\ngit commit -m \"Add _redirects file\"\ngit push\n</code></pre>"},{"location":"version-1.0.0/#mise-a-jour-des-branches-main-et-develop","title":"Mise \u00e0 jour des branches main et develop","text":"<p>Une fois la recette utilisateur termin\u00e9e et les bugs corrig\u00e9s, la branche <code>release/1.0.0</code> est valid\u00e9e et nous pouvons la mettre en production en figeant la version \u00e0 <code>1.0.0</code>.</p> <pre><code>{\n  \"name\": \"marvel-app\",\n  \"version\": \"1.0.0\",\n  ...\n}\n</code></pre> <p>Commiter et pusher les modifications :</p> <pre><code>git add package.json\ngit commit -m \"Update version to 1.0.0\"\ngit push\n</code></pre> <p>Nous pouvons valider la pull request <code>release/1.0.0</code>. Nous pouvons aussi supprimer la branche <code>release/1.0.0</code> car elle n'est plus utile.</p> <p>Une fois la branche <code>main</code> \u00e0 jour avec les fonctionnalit\u00e9s de la branche <code>release/1.0.0</code>, nous allons mettre \u00e0 jour la branche <code>develop</code> pour r\u00e9cup\u00e9rer les fonctionnalit\u00e9s de la branche <code>release/1.0.0</code>.</p> <p>Pour cela nous allons cr\u00e9er et valider une pull request de <code>main</code> vers <code>develop</code>.</p>"},{"location":"version-1.0.0/#creation-de-la-release","title":"Cr\u00e9ation de la release","text":"<p>Nous allons utiliser la fonctionnalit\u00e9 <code>create release</code> de GitHub pour cr\u00e9er la release. La release se base sur un tag git et ajoute des fonctionnalit\u00e9s suppl\u00e9mentaires. La release est visible dans l'onglet <code>Releases</code> du repository.</p> <p>Elle permet d'ajouter des notes de version, des captures d'\u00e9cran, etc... Elle permet aussi de t\u00e9l\u00e9charger le code source de la release.</p> <p></p> <p>Une fois la release cr\u00e9\u00e9e, elle est visible dans le menu de droite de la page du repository.</p>"},{"location":"version-1.1.0/","title":"Version 1.1.0","text":""},{"location":"version-1.1.0/#objectifs","title":"Objectifs","text":"<p>La version 1.1.0 va apporter les modifications suivantes :</p> <ul> <li>Ajout du num\u00e9ro de version dans le footer</li> <li>Mise en oeuvre des tests unitaires</li> <li>Mise en oeuvre du workflow de test unitaire</li> <li>Ajout de tests unitaires pour <ul> <li><code>src/components</code></li> <li><code>src/api</code></li> <li><code>src/pages</code></li> </ul> </li> <li>Exclure certains fichiers du rapport de couverture de code</li> <li>Suppression du code mort</li> </ul>"},{"location":"version-1.1.0/#mise-en-oeuvre-de-2-developpements-en-parallele","title":"Mise en oeuvre de 2 d\u00e9veloppements en parall\u00e8le","text":"<p>Nous allons mettre en oeuvre 2 d\u00e9veloppements en parall\u00e8le pour voir comment g\u00e9rer les mises \u00e0 jour de code source.</p> <pre><code>gitGraph\n    checkout main\n    commit tag: \"v1.0.0\"\n    branch develop\n    checkout develop\n    branch feature-add-version-number\n    checkout feature-add-version-number\n    commit id:\"footer\"\n    checkout develop\n    branch feature-add-unit-tests\n    commit id: \"workflow\"\n    commit id: \"fix-test\"\n    checkout develop\n    merge feature-add-version-number\n    checkout feature-add-unit-tests\n    merge develop\n    checkout develop\n    merge feature-add-unit-tests\n    branch feature-add-unit-tests-components\n    checkout feature-add-unit-tests-components\n    commit id: \"number\"\n    commit id: \"...\"\n    commit id: \"....\"\n    commit id: \"dead-code\"\n    checkout develop\n    merge feature-add-unit-tests-components\n    branch release-1.1.0\n    checkout release-1.1.0\n    commit id:\"1.1.0.rc1\"\n    commit id:\"doc\"\n    commit id:\"1.1.0\"\n    checkout main\n    merge release-1.1.0\n    commit tag: \"v1.1.0\"\n    checkout develop\n    merge main</code></pre>"},{"location":"version-1.1.0/#ajout-du-numero-de-version-dans-footer","title":"Ajout du num\u00e9ro de version dans footer","text":"<p>Nous allons ajouter le num\u00e9ro de version dans le footer de l'application. Cela permettra de v\u00e9rifier que la bonne version de l'application est d\u00e9ploy\u00e9e.</p> <p>Cr\u00e9er la branche <code>feature/add-version-number</code> :</p> <pre><code>git switch develop\ngit switch -c feature/add-version-number\n</code></pre> <p>Modifier le fichier <code>src/Layout.js</code> avec le contenu suivant :</p> <pre><code>import React from 'react';\nimport { Outlet } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport packageJson from '../package.json';\n\nconst Layout = () =&gt; {\n    const version = packageJson.version;\n\n    return (\n        &lt;&gt;\n            &lt;header&gt;\n                &lt;h1&gt;Marvel App&lt;/h1&gt;\n                &lt;nav&gt;\n                    &lt;NavLink to=\"/\"&gt;Home&lt;/NavLink&gt; - &lt;NavLink to=\"/about\"&gt;About&lt;/NavLink&gt; - &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n                &lt;/nav&gt;\n            &lt;/header&gt;\n            &lt;main&gt;\n                &lt;Outlet /&gt;\n            &lt;/main&gt;\n            &lt;footer&gt;\n                &lt;p&gt;Marvel App - {version}&lt;/p&gt;\n            &lt;/footer&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default Layout;\n</code></pre> <p>Nous utilisons ici la variable <code>version</code> du fichier <code>package.json</code> pour afficher le num\u00e9ro de version de l'application.</p> <p>Modifier le fichier <code>package.json</code> pour ajouter la version de l'application :</p> <pre><code>{\n  \"name\": \"marvel-app\",\n  \"version\": \"1.1.0\",\n  ... \n}\n</code></pre> <p>Commiter les modifications et pusher les modifications sur GitHub :</p> <pre><code>git add src/Layout.js\ngit add package.json\n\ngit commit -m \"Add version number in footer\"\ngit push --set-upstream origin feature/add-version-number\n</code></pre> <p>Cr\u00e9er une pull request, sans la valider, sur GitHub pour merger plus tard, la branche <code>feature/add-version-number</code> dans la branche <code>develop</code>. </p>"},{"location":"version-1.1.0/#mise-en-oeuvre-des-tests-unitaires","title":"Mise en oeuvre des tests unitaires","text":"<p>Lors de la cr\u00e9ation du projet avec <code>create-react-app</code>, un fichier <code>src/App.test.js</code> a \u00e9t\u00e9 cr\u00e9\u00e9. Ce fichier contient un exemple de test unitaire avec la librairie <code>jest</code>. Nous allons utiliser cette librairie pour \u00e9crire nos tests unitaires.</p> <p>Pour lancer les tests unitaires, ex\u00e9cuter la commande suivante :</p> <pre><code>npm test\n</code></pre> <p>Cela va lancer jest en mode watch. A chaque modification d'un fichier, jest va relancer les tests unitaires. La consolse s'affiche et permet de lancer les tests unitaires, de les relancer, de les filtrer, etc...</p> <p>Par exemple pour lancer toutes les suites de tests, il suffit de taper <code>a</code> dans la console.</p> <p>On constate que le test unitaire de <code>App.js</code> est en erreur. C'est normal, car le composant <code>App</code> a \u00e9volu\u00e9 depuis la cr\u00e9ation du projet. Nous allons donc modifier le test unitaire pour qu'il soit \u00e0 nouveau valide.</p> <p>Avant de modifier le code source, nous allons cr\u00e9er la branche <code>feature/add-unit-tests</code> pour travailler sur cette fonctionnalit\u00e9.</p> <pre><code>git switch develop\ngit switch -c feature/add-unit-tests\n</code></pre> <p>Mise en oeuvre du workflow de test unitaire</p> <p>Nous allons maintenant mettre en oeuvre un workflow de test unitaire. L'objectif est de lancer les tests unitaires \u00e0 chaque push, ce qui permettra de v\u00e9rifier que le code source est toujours valide. Et permettra de rajouter un <code>status check</code> sur github et donc de bloquer les pull requests si les tests unitaires ne sont pas valides.</p> <p>Cr\u00e9er un fichier <code>.github/workflows/unit-tests.yml</code> avec le contenu suivant :</p> <pre><code>name: Unit Tests\n\non:\n  push:\n  pull_request:\n\njobs:\n    test:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: actions/setup-node@v3\n              with:\n                node-version: 18\n                cache: 'npm'\n            - run: npm ci\n            - run: npm run test\n</code></pre> <p>Commiter et pusher les modifications :</p> <pre><code>git add .github/workflows/unit-tests.yml\ngit commit -m \"Add unit tests workflow\"\ngit push origin feature/add-unit-tests\n</code></pre> <p>Modifier la protection des branches <code>develop</code> et <code>main</code> pour ajouter le <code>status check</code> sur le workflow de test unitaire (nomm\u00e9 test), afin de bloquer les pull requests si les tests unitaires ne sont pas valides. V\u00e9rifier que la case <code>Require branches to be up to date before merging</code> est coch\u00e9e, cela permet de v\u00e9rifier que la branche de la pull request est bien \u00e0 jour avec la branche de destination.</p> <p>Cr\u00e9er une pull request pour merger la branche <code>feature/add-unit-tests</code> dans la branche <code>develop</code>. Le workflow de test unitaire est lanc\u00e9 et la pull request est bloqu\u00e9e, car le test unitaire de <code>App.js</code> est en erreur.</p>"},{"location":"version-1.1.0/#pull-requests","title":"Pull requests","text":"<p>Nous avons 2 pull requests en attente de validation :</p> <ul> <li><code>feature/add-version-number</code> : Add version number in footer</li> <li><code>feature/add-unit-tests</code> : add unit tests</li> </ul> <p>La pull request <code>feature/add-version-number</code> est bloqu\u00e9e (en orange), car nous avons ajout\u00e9 un <code>status check</code> sur le workflow de test unitaire, mais cette branche ne contient pas le fichier <code>.github/workflows/unit-tests.yml</code>. </p> <p>La pull request <code>feature/add-unit-tests</code> est bloqu\u00e9 (en rouge), car le test unitaire de <code>App.js</code> est en erreur.</p> <p></p> <p>Nous allons fixer le test unitaire de <code>App.js</code> pour que la pull request <code>feature/add-unit-tests</code> soit valide et que nous puissions la merger dans la branche <code>develop</code>.</p> <p>Correction du test unitaire de <code>App.js</code></p> <p>Modifier le fichier <code>src/App.test.js</code> avec le contenu suivant :</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () =&gt; {\n  render(&lt;App /&gt;);\n\n  const h1Element = screen.getByRole('heading', { level: 1, name: \"Marvel App\" });\n  expect(h1Element).toBeInTheDocument();\n});\n</code></pre> <p>Le test unitaire v\u00e9rifie que le composant <code>App</code> contient un titre <code>h1</code> avec le texte <code>Marvel App</code>. Le test unitaire est \u00e0 nouveau valide. Nous ferons \u00e9voluer ce test unitaire par la suite pour le rendre plus pertinent. Cependant ce test unitaire est d\u00e9j\u00e0 utile, car il permet de v\u00e9rifier que le composant <code>App</code> est bien rendu, ce qui veut dire que l'application est bien lanc\u00e9e.</p> <p>Commiter les modifications et pusher les modifications sur GitHub :</p> <pre><code>git add src/App.test.js\ngit commit -m \"Fix unit test for App.js\"\ngit push --set-upstream origin feature/add-unit-tests\n</code></pre> <p>La pull request <code>feature/add-unit-tests</code> est \u00e0 nouveau valide, on peut donc merger la pull request. </p> <p>Mise \u00e0 jour de la pull request <code>feature/add-version-number</code></p> <p>On constate que la pull request <code>feature/add-version-number</code> est toujours bloqu\u00e9e, car elle ne contient toujours pas le fichier <code>.github/workflows/unit-tests.yml</code>, mais nous avons aussi un nouveau message car la branche <code>feature/add-unit-tests</code> n'est pas \u00e0 jour avec la branche <code>develop</code>. </p> <p></p> <p>Nous allons donc mettre \u00e0 jour la branche <code>feature/add-version-number</code> avec la branche <code>develop</code>, en cliquant sur le bouton <code>Update branch</code>. Il ne devrait pas y avoir de conflit, car nous n'avons pas modifi\u00e9 le m\u00eame fichier dans les 2 branches. La pull request <code>feature/add-version-number</code> est \u00e0 nouveau valide, on peut donc merger la pull request.</p> <p>La branche <code>develop</code> est maintenant \u00e0 jour avec les 2 pull requests valid\u00e9es. Nous avons donc une branche <code>develop</code> qui contient les 2 fonctionnalit\u00e9s:</p> <ul> <li>Ajout du num\u00e9ro de version dans le footer</li> <li>Mise en oeuvre des tests unitaires</li> </ul> <p>Nous allons maintenant ajouter des tests unitaires pour les composants de l'application.</p>"},{"location":"version-1.1.0/#ajout-de-tests-unitaires-pour-srccomponents","title":"Ajout de tests unitaires pour <code>src/components</code>","text":"<p>Nous allons cr\u00e9er une branche <code>feature/add-unit-tests-components</code> pour travailler sur les tests unitaires des composants.</p> <pre><code>git switch develop\ngit pull\ngit switch -c feature/add-unit-tests-components\n</code></pre>"},{"location":"version-1.1.0/#numberofcharacters","title":"NumberOfCharacters","text":"<p>Lorsque l'on met en oeuvre des test unitaires, on souhaite tester tout les cas possibles. Pour cela, on va utiliser le principe de la <code>partition de l'espace d'entr\u00e9e</code>. Cela consiste \u00e0 d\u00e9finir les diff\u00e9rentes valeurs possibles pour chaque param\u00e8tre d'une fonction. Pour chaque combinaison de valeurs, on va tester le comportement de la fonction.</p> <p>Dans le cas de <code>NumberOfCharacters</code>, nous avons un seul param\u00e8tre, qui est <code>characters</code>. Nous allons donc tester les cas suivants :</p> <ul> <li><code>characters</code> est <code>null</code>, c'est \u00e0 dire que la fonction est appel\u00e9e sans param\u00e8tre</li> <li><code>characters</code> est vide</li> <li><code>characters</code> contient des \u00e9l\u00e9ments</li> </ul> <p>Nous avons donc 3 cas \u00e0 tester. Nous allons donc devoir cr\u00e9er 3 tests unitaires. </p> <p>Cependant en regardant le composant, on constate que l'on pourrait avoir un 4\u00e8me cas, lorsque <code>characters</code> contient un seul \u00e9l\u00e9ment, dans ce cas, il faudrait afficher <code>There is 1 character</code> sans <code>s</code>. Nous allons donc cr\u00e9er un 4\u00e8me test unitaire.</p> <p>Cr\u00e9er un fichier <code>src/components/NumberOfCharacters.test.js</code> avec le contenu suivant :</p> <pre><code>import { render } from '@testing-library/react';\nimport { NumberOfCharacters } from './NumberOfCharacters';\n\ndescribe('NumberOfCharacters', () =&gt; {\n\n  it('renders \"There is no characters\" when characters prop is empty', () =&gt; {\n    const { getByText } = render(&lt;NumberOfCharacters characters={[]} /&gt;);\n    expect(getByText('There is no characters')).toBeInTheDocument();\n  });\n\n  it('renders \"There is no characters\" when characters prop is not passed', () =&gt; {\n    const { getByText } = render(&lt;NumberOfCharacters /&gt;);\n    expect(getByText('There is no characters')).toBeInTheDocument();\n  });\n\n  it('renders \"There is 1 character\" when characters prop has 1 item', () =&gt; {\n    const { getByText } = render(&lt;NumberOfCharacters characters={['Iron Man']} /&gt;);\n    expect(getByText('There is 1 character')).toBeInTheDocument();\n  });\n\n  it('renders \"There is 2 characters\" when characters prop has 2 items', () =&gt; {\n    const { getByText } = render(&lt;NumberOfCharacters characters={['Iron Man', 'Spider-Man']} /&gt;);\n    expect(getByText('There is 2 characters')).toBeInTheDocument();\n  });\n\n});\n</code></pre> <p>Nous avons donc 4 tests unitaires qui v\u00e9rifient que le composant <code>NumberOfCharacters</code> affiche le bon texte en fonction du nombre de personnages. Nous avons donc test\u00e9 les 4 cas possibles et constatons qu'un des tests unitaires est en erreur. C'est normal, car nous n'avons pas encore impl\u00e9ment\u00e9 le code pour g\u00e9rer le cas o\u00f9 <code>characters</code> contient un seul \u00e9l\u00e9ment.</p> <p>En \u00e9crivant d'abord le test unitaire, nous nous assurons que le test unitaire est en erreur avant d'\u00e9crire le code. Cela permet de v\u00e9rifier que le test unitaire est bien valide. Cette pratique s'appelle le <code>test driven development</code> (TDD). Notre composant sera donc valide lorsque le test unitaire sera valide.</p> <p>Modifier le fichier <code>src/components/NumberOfCharacters.js</code> avec le contenu suivant :</p> <pre><code>export function NumberOfCharacters({ characters = [] }) {\n  if (characters.length === 0) {\n    return &lt;p&gt;There is no characters&lt;/p&gt;;\n  } else if (characters.length === 1) {\n    return &lt;p&gt;There is 1 character&lt;/p&gt;;\n  } else {\n    return &lt;p&gt;There is {characters.length} characters&lt;/p&gt;;\n  }\n}\n</code></pre> <p>Le test unitaire est \u00e0 nouveau valide et nous avons test\u00e9 tous les cas possibles, la couverture de code est donc de 100%. Nous allons voir juste apr\u00e8s, comment mesurer cette couverture de code.</p> <p>Maintenant que nous avons \u00e9crit le code et le test unitaire, on peut refactorer le code pour le simplifier sans risque, en effet, si le test unitaire est toujours valide, c'est que le comportement de la fonction n'a pas chang\u00e9.</p> <p>Une version simplifi\u00e9e du composant <code>NumberOfCharacters</code> est la suivante :</p> <pre><code>export function NumberOfCharacters({ characters = [] }) {\n  return (\n    &lt;p&gt;\n      There is {characters.length === 0 ? 'no' : characters.length} character{characters.length !== 1 ? 's' : ''}\n    &lt;/p&gt;\n  );\n}\n</code></pre> <p>Nous utilisons ici l'op\u00e9rateur ternaire pour simplifier le code. Le code est plus court et plus lisible.</p> <p>Commiter les modifications :</p> <pre><code>git add src/components/NumberOfCharacters.js\ngit add src/components/NumberOfCharacters.test.js\ngit commit -m \"Add unit tests for NumberOfCharacters\"\n</code></pre>"},{"location":"version-1.1.0/#characterslist","title":"CharactersList","text":"<p>Nous allons maintenant ajouter des tests unitaires pour le composant <code>CharactersList</code>. Nous allons utiliser le m\u00eame principe que pour <code>NumberOfCharacters</code>, c'est \u00e0 dire tester tous les cas possibles.</p> <p>La fonction <code>CharactersList</code> prend elle aussi un seul param\u00e8tre, qui est <code>characters</code>. Nous allons donc tester les cas suivants :</p> <ul> <li><code>characters</code> est <code>null</code></li> <li><code>characters</code> est vide</li> <li><code>characters</code> contient des \u00e9l\u00e9ments</li> </ul> <p>Pour chaque \u00e9l\u00e9ment de <code>characters</code>, nous utilisons ensuite les propri\u00e9t\u00e9s <code>id</code>, <code>name</code>, nous n'allons pas tester les cas o\u00f9 ces propri\u00e9t\u00e9s sont <code>null</code> ou <code>undefined</code>, car ces cas ne sont pas possible dans notre application.</p> <p>Cr\u00e9er un fichier <code>src/components/CharactersList.test.js</code> avec le contenu suivant :</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport { CharactersList } from './CharactersList';\nimport { BrowserRouter } from 'react-router-dom'\n\n\ndescribe('CharactersList', () =&gt; {\n\n    it('renders a list of characters', () =&gt; {\n        // when\n        const characters = [\n            { id: 1, name: 'Iron Man' },\n            { id: 2, name: 'Captain America' },\n            { id: 3, name: 'Thor' },\n        ];\n\n        // then\n        render(&lt;CharactersList characters={characters} /&gt;, { wrapper: BrowserRouter });\n\n        // expect a list with the id \"characters\" to be in the document\n        const characterList = screen.getByRole('list', { id: 'characters' });\n        expect(characterList).toBeInTheDocument();\n\n        // expect a listitem for each character\n        const characterItems = screen.getAllByRole('listitem');\n        expect(characterItems).toHaveLength(characters.length);\n\n        // expect each listitem to have the character name and a link to the character detail page\n        characterItems.forEach((item, index) =&gt; {\n            // expect each listitem to have the character name\n            expect(item).toHaveTextContent(characters[index].name);\n\n            // expect each listitem to have a link to the character detail page\n            const link = screen.getByRole('link', { name: characters[index].name });\n            expect(link).toBeInTheDocument();\n            expect(link).toHaveAttribute('href', `/characters/${characters[index].id}`);\n        });\n\n    });\n\n    it('renders an empty list when no characters are provided', () =&gt; {\n        // when\n\n        // then\n        render(&lt;CharactersList /&gt;, { wrapper: BrowserRouter });\n\n        // expect a list with the id \"characters\" to be in the document\n        const characterList = screen.getByRole('list', { id: 'characters' });\n        expect(characterList).toBeInTheDocument();\n\n        // expect no listitems\n        const characterItems = screen.queryAllByRole('listitem');\n        expect(characterItems).toHaveLength(0);\n    });\n\n});\n</code></pre> <p>Une bonne pratique de r\u00e9daction des tests unitaires est de d\u00e9couper le test en 3 parties :</p> <ul> <li><code>when</code> : on pr\u00e9pare les donn\u00e9es d'entr\u00e9e</li> <li><code>then</code> : on ex\u00e9cute la fonction \u00e0 tester</li> <li><code>expect</code> : on v\u00e9rifie le r\u00e9sultat</li> </ul> <p>Cela permet de rendre le test unitaire plus lisible et de mieux comprendre ce que l'on teste.</p> <p>Le composant <code>CharactersList</code> utilise le composant <code>Link</code> de <code>react-router-dom</code>. Ce composant <code>Link</code> a besoin d'un <code>router</code> pour fonctionner. Nous utilisons donc le composant <code>BrowserRouter</code> pour fournir un <code>router</code> au composant <code>CharactersList</code>.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add src/components/CharactersList.test.js\ngit commit -m \"Add unit tests for CharactersList\"\ngit push --set-upstream origin feature/add-unit-tests-components\n</code></pre>"},{"location":"version-1.1.0/#couverture-de-code","title":"Couverture de code","text":"<p>Nous avons \u00e9crit des tests unitaires pour les composants <code>NumberOfCharacters</code> et <code>CharactersList</code>. Nous allons maintenant mesurer la couverture de code de ces tests unitaires.</p>"},{"location":"version-1.1.0/#couverture-de-code-avec-jest","title":"Couverture de code avec Jest","text":"<p>Jest permet de mesurer la couverture de code des tests unitaires. Pour cela, il faut lancer les tests unitaires avec l'option <code>--coverage</code>. Cela va g\u00e9n\u00e9rer un rapport de couverture de code dans le dossier <code>coverage</code> et afficher le rapport dans la console.</p> <p>Lancer les tests unitaires avec l'option <code>--coverage</code> et <code>--watchAll=false</code> pour ne pas lancer les tests en mode watch :</p> <pre><code>npm test -- --coverage --watchAll=false\n</code></pre> <p>On peut ajouter l'option <code>--coverage</code> dans le fichier <code>package.json</code> pour ne pas avoir \u00e0 taper cette option \u00e0 chaque fois :</p> <pre><code>{\n    ...\n  \"scripts\": {\n    ...\n    \"test\": \"react-scripts test\",\n    \"test:coverage\": \"react-scripts test --coverage --watchAll=false\",\n    ...\n  }\n}\n</code></pre> <p>On peut ensuite lancer les tests unitaires avec la commande suivante pour avoir le rapport de couverture de code :</p> <pre><code>npm run test:coverage\n</code></pre> <p>Le rapport de couverture de code est le suivant :</p> <p></p> <p>En vert, on voit le code qui est couvert \u00e0 100% par les tests unitaires. En rouge, on voit le code qui n'est pas couvert par les tests unitaires. En jaune, on voit le code qui est partiellement couvert par les tests unitaires.</p> <p>Nous avons donc une couverture de code de 100% pour les composants <code>NumberOfCharacters</code> et <code>CharactersList</code>, ainsi que pour les composants <code>App</code>.</p> <p>On constate que certains composants sont partielement couverts par les tests unitaires, alors que nous n'avons pas \u00e9crit de tests unitaires pour ces composants. C'est normal, car ces composants sont utilis\u00e9s par le composant <code>App</code>, qui est lui m\u00eame couvert \u00e0 100% par les tests unitaires. Cela veut dire que les tests unitaires de <code>App</code> couvrent aussi les composants utilis\u00e9s par <code>App</code>.</p> <p>Attention, une couverture de code de 100% ne veut pas dire que tous les cas possibles sont test\u00e9s. Cela veut dire que tous les chemins du code sont test\u00e9s. Il est possible d'avoir une couverture de code de 100% avec des tests unitaires qui ne testent qu'un seul cas. Typiquement avec le composant <code>App</code>, nous avons un seul test unitaire qui v\u00e9rifie que le composant est rendu. Mais cela ne v\u00e9rifie pas que le composant est rendu avec les bonnes donn\u00e9es.</p> <p>De plus m\u00eame si un composant est couvert par les tests d'un autre composant, il est pr\u00e9f\u00e9rable d'\u00e9crire des tests unitaires pour chaque composant. Cela permet de tester chaque composant ind\u00e9pendamment des autres composants. </p> <p>Lors de l'execution de la commande <code>npm run test:coverage</code>, un rapport de couverture de code est g\u00e9n\u00e9r\u00e9 dans le dossier <code>coverage</code>. Ce rapport est au format <code>lcov</code>, c'est un format standard pour les rapports de couverture de code. Ce rapport peut \u00eatre utilis\u00e9 par des outils tiers pour afficher le rapport de couverture de code. Nous verrons plus tard comment utiliser ce rapport avec SonarCloud.</p> <p>Ce dossier <code>coverage</code> n'est pas versionn\u00e9, car il est g\u00e9n\u00e9r\u00e9 \u00e0 chaque fois que l'on lance les tests unitaires. Il est donc inutile de le versionner, car il est g\u00e9n\u00e9r\u00e9 \u00e0 partir du code source. Il est donc ajout\u00e9 au fichier <code>.gitignore</code>.</p> <pre><code>node_modules\ncoverage\n</code></pre> <p>Commiter et pusher les modifications :</p> <pre><code>git add package.json\ngit add .gitignore\ngit commit -m \"Add coverage report\"\ngit push\n</code></pre>"},{"location":"version-1.1.0/#tests-unitaires-de-srcapi","title":"Tests unitaires de <code>src/api</code>","text":"<p>Nous allons maintenant ajouter des tests unitaires pour le dossier <code>src/api</code>. Nous allons utiliser le m\u00eame principe que pour les composants, c'est \u00e0 dire tester tous les cas possibles.</p>"},{"location":"version-1.1.0/#getcharacters","title":"getCharacters","text":"<p>La fonction <code>getCharacters</code> ne prend, pour l'instant, pas de param\u00e8tre. Nous allons donc tester qu'elle retourne bien la liste des personnages. Le test semble simple, mais il \u00e9voluera par la suite, lorsque nous ajouterons des param\u00e8tres \u00e0 la fonction.</p> <p>Cr\u00e9er un fichier <code>src/api/character-api.test.js</code> avec le contenu suivant :</p> <pre><code>const { getCharacters, getCharacterById } = require('./character-api');\nconst fs = require('fs');\n\ndescribe('character-api', () =&gt; {\n  const expected = JSON.parse(fs.readFileSync('src/data/characters.json', 'utf8'));\n\n  describe('getCharacters', () =&gt; {\n    test('returns an array of characters', () =&gt; {\n      // when\n\n      // then\n      const characters = getCharacters();\n\n      // expect\n      expect(Array.isArray(characters)).toBe(true);\n      expect(characters.length).toBe(expected.length);\n    });\n\n  });\n});\n</code></pre> <p>Nous avons donc un test unitaire qui v\u00e9rifie que la fonction <code>getCharacters</code> retourne bien un tableau de personnages et que le tableau contient le bon nombre de personnages. La fonction <code>getCharacters</code> \u00e9tant pour l'instant tr\u00e8s simple, le test unitaire est lui aussi tr\u00e8s simple.</p>"},{"location":"version-1.1.0/#getcharacterbyid","title":"getCharacterById","text":"<p>La fonction <code>getCharacterById</code> prend un param\u00e8tre, qui est l'identifiant du personnage. Nous allons donc tester les cas suivants :</p> <ul> <li><code>id</code> est une cha\u00eene de caract\u00e8res</li> <li><code>id</code> est un nombre</li> <li><code>id</code> n'est pas fourni</li> <li><code>id</code> n'est pas un nombre ni une cha\u00eene de caract\u00e8res</li> <li><code>id</code> est un nombre ou une cha\u00eene de caract\u00e8res, mais ne correspond \u00e0 aucun personnage</li> </ul> <pre><code>const { getCharacters, getCharacterById } = require('./character-api');\nconst fs = require('fs');\n\ndescribe('character-api', () =&gt; {\n  const expected = JSON.parse(fs.readFileSync('src/data/characters.json', 'utf8'));\n\n  describe('getCharacters', () =&gt; {\n    test('returns an array of characters', () =&gt; {\n      // when\n\n      // then\n      const characters = getCharacters();\n\n      // expect\n      expect(Array.isArray(characters)).toBe(true);\n      expect(characters.length).toBe(expected.length);\n    });\n\n  });\n\n  describe('getCharacterById', () =&gt; {\n    test('returns the character with the given id when id is a string', () =&gt; {\n      // when\n      const id = \"1009663\";\n      const name = \"Thor\";\n\n      // then\n      const character = getCharacterById(id);\n\n      // expect\n      expect(character.id).toBe(id);\n      expect(character.name).toBe(name);\n    });\n\n    test('returns the character with the given id when id is a number', () =&gt; {\n      // when\n      const id = 1009663;\n      const name = \"Thor\";\n\n      // then\n      const character = getCharacterById(id);\n\n      // expect\n      expect(character.id).toBe(id.toString());\n      expect(character.name).toBe(name);\n    });\n\n    test('throws an error if id is not provided', () =&gt; {\n      expect(() =&gt; {\n        getCharacterById();\n      }).toThrow(`Parameter id must be a number or a string, but it was undefined`);\n    });\n\n    test('throws an error if id is not a number or a string', () =&gt; {\n      expect(() =&gt; {\n        getCharacterById({});\n      }).toThrow(`Parameter id must be a number or a string, but it was object`);\n    });\n\n    test('throws an error if character with given id is not found', () =&gt; {\n      const id = 999;\n      expect(() =&gt; {\n        getCharacterById(id);\n      }).toThrow(`Character with id ${id} not found`);\n    });\n  });\n});\n</code></pre> <p>Nous avons donc 5 tests unitaires qui v\u00e9rifient que la fonction <code>getCharacterById</code> retourne bien le personnage avec l'identifiant fourni. Certains test ne sont pas passants, car nous n'avons pas encore impl\u00e9ment\u00e9 le code pour g\u00e9rer ces cas. Nous allons donc impl\u00e9menter le code pour que les tests unitaires soient valides.</p> <p>Modifier le fichier <code>src/api/character-api.js</code> avec le contenu suivant :</p> <pre><code>const characters = require('../data/characters.json');\n\n/**\n * Get all characters from json file\n * @returns \n */\nfunction getCharacters() {\n    return characters\n}\n\n/**\n * Get character by id\n * @param {number} id \n * @returns \n */\nfunction getCharacterById(id) {\n    // If id is a number, convert it to string\n    if (typeof id === 'number') {\n        id = id.toString()\n    }\n\n    if (typeof id !== 'string') {\n        throw new Error(`Parameter id must be a number or a string, but it was ${typeof id}`)\n    }\n\n    // Find character by id\n    const character = characters.find((character) =&gt; character.id === id)\n\n    // Throw error if character is not found\n    if (!character) {\n        throw new Error(`Character with id ${id} not found`)\n    }\n    return character\n}\n\nmodule.exports = {\n    getCharacters,\n    getCharacterById\n}\n</code></pre> <p>Suite \u00e0 cette modification, tous les tests unitaires sont valides. La couverture de code est donc de 100% pour les fonctions <code>getCharacters</code> et <code>getCharacterById</code>.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add src/api/character-api.js\ngit add src/api/character-api.test.js\ngit commit -m \"Add unit tests for character-api\"\ngit push\n</code></pre>"},{"location":"version-1.1.0/#tests-unitaires-de-srcpages","title":"Tests unitaires de <code>src/pages</code>","text":""},{"location":"version-1.1.0/#aboutpage","title":"AboutPage","text":"<p>Cr\u00e9er un fichier <code>src/pages/AboutPage.test.js</code> avec le contenu suivant :</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport AboutPage from './AboutPage';\n\ntest('renders About Us message', () =&gt; {\n  // when\n\n  // then\n  render(&lt;AboutPage /&gt;);\n\n  // expect the document title to be \"About | Marvel App\"\n  expect(document.title).toEqual(\"About | Marvel App\");\n\n  // expect the heading and the paragraph to be in the document\n  const h2Element = screen.getByRole('heading', { level: 2, name: \"About Us\" });\n  const pElement = screen.getByText('We are a team of Marvel fans who love to create awesome apps!');\n\n  expect(h2Element).toBeInTheDocument();\n  expect(pElement).toBeInTheDocument();\n});\n</code></pre> <p>Commiter et pusher les modifications :</p> <pre><code>git add src/pages/AboutPage.test.js\ngit commit -m \"Add unit tests for AboutPage\"\ngit push\n</code></pre>"},{"location":"version-1.1.0/#characterspage","title":"CharactersPage","text":"<p>Cr\u00e9er un fichier <code>src/pages/CharactersPage.test.js</code> avec le contenu suivant :</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport CharactersPage from './CharactersPage';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst characters = [\n    {\n        id: \"1\",\n        name: \"Thor\"\n    }\n];\n\n// mock the useLoaderData hook, so that we can test the CharactersPage component\njest.mock('react-router', () =&gt; ({\n    ...jest.requireActual('react-router'), // use actual for all non-hook parts\n    useLoaderData: () =&gt; {\n        return characters;\n    },\n}));\n\ndescribe('CharactersPage', () =&gt; {\n\n    test('render CharactersPage component', () =&gt; {\n        // when\n\n        // then\n        render(&lt;CharactersPage /&gt;, { wrapper: BrowserRouter });\n\n        // expect the document title to be \"Marvel App\"\n        expect(document.title).toBe('Marvel App');\n\n\n        // expect the heading 'Marvel Characters' to be in the document\n        const h2Element = screen.getByRole('heading', { level: 2, name: \"Marvel Characters\" });\n        expect(h2Element).toBeInTheDocument();\n\n        // expect the character Thor to be in the document\n        const thorElement = screen.getByText(characters[0].name);\n        expect(thorElement).toBeInTheDocument();\n\n        // expect the number of characters to be in the document\n        const numberOfCharactersElement = screen.getByText(`There is ${characters.length} character`);\n        expect(numberOfCharactersElement).toBeInTheDocument();\n    });\n\n});\n</code></pre> <p>Ce test unitaire est un peu plus complexe que les pr\u00e9c\u00e9dents. En effet, nous avons besoin de mocker le hook <code>useLoaderData</code> pour pouvoir tester le composant <code>CharactersPage</code>. </p> <p>Mocker un hook consiste \u00e0 remplacer le comportement du hook par un comportement personnalis\u00e9. Ici, nous rempla\u00e7ons le comportement du hook <code>useLoaderData</code> par une fonction qui retourne un tableau de personnages. Cela nous permet de tester le composant <code>CharactersPage</code> avec des donn\u00e9es personnalis\u00e9es.</p> <p>Lors de test unitaire, il est courant de mocker des fonctions ou des hooks pour pouvoir tester le comportement d'un composant dans diff\u00e9rentes situations, sans avoir \u00e0 mettre en place un environnement complexe.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add src/pages/CharactersPage.test.js\ngit commit -m \"Add unit tests for CharactersPage\"\ngit push\n</code></pre>"},{"location":"version-1.1.0/#nettoyage-du-code","title":"Nettoyage du code","text":"<p>Exclure du code du rapport de couverture de code</p> <p>Certains fichiers ne sont pertinents \u00e0 \u00eatre test\u00e9s. c'est le cas par exemple des fichiers g\u00e9n\u00e9r\u00e9s par <code>create-react-app</code> que nous n'avons pas modifi\u00e9s. Nous allons donc exclure ces fichiers du rapport de couverture de code.</p> <p>Modifier le fichier <code>package.json</code> pour ajouter la section <code>jest</code> :</p> <pre><code>{\n   ...\n   \"jest\": {\n    \"coveragePathIgnorePatterns\" : [\n      \"/src/index.js\",\n      \"/src/reportWebVitals.js\"\n    ]\n  }\n}\n</code></pre> <p>Ici nous configurons jest pour ignorer les fichiers <code>src/index.js</code> et <code>src/reportWebVitals.js</code> pour le rapport de couverture de code.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add package.json\ngit commit -m \"Exclude files from coverage report\"\ngit push\n</code></pre> <p>Suppression du code mort li\u00e9 \u00e0 la premi\u00e8re version de l'application</p> <p>Avec le rapport de couverture de code, nous pouvons identifier le code mort, c'est \u00e0 dire le code qui n'est pas ex\u00e9cut\u00e9 par les tests unitaires. Soit nous devons \u00e9crire des tests unitaires pour ce code (car ce n'est finalement par du code mort), soit nous devons supprimer ce code.</p> <p>Nous avons du code mort li\u00e9 \u00e0 la premi\u00e8re version de l'application qui n'utilisait pas React. Tout le code ne remonte pas dans le rapport de couverture car celui-ci ne prend en compte que le code javascript. Nous allons donc supprimer ce code et en d\u00e9duire ce que nous pouvons supprimer en rapport avec les fichiers javascript supprim\u00e9s.</p> <p>Le rapport de couverture de code nous indique que le fichier <code>src/script.js</code> n'est pas couvert par les tests unitaires. Nous pouvons le supprimer car il ne sert plus \u00e0 rien.</p> <p>Ce script javascript est appel\u00e9 dans le fichier <code>src/index.html</code>. On constate que le fichier <code>src/index.html</code> n'est plus utilis\u00e9, il s'agissait du fichier html de la premi\u00e8re version de l'application. Nous pouvons donc le supprimer. Apr\u00e8s analyse, nous pouvons aussi supprimer les fichiers <code>src/index.css</code> et <code>src/App.css</code> qui ne sont plus utilis\u00e9.</p> <p>Modifier le fichier <code>index.js</code> pour supprimer l'import de fichier <code>index.css</code>:</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/React.StrictMode&gt;\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n</code></pre> <p>Commiter et pusher les modifications :</p> <pre><code>git add src/index.js\ngit rm src/index.html\ngit rm src/index.css\ngit rm src/App.css\ngit rm src/script.js\ngit commit -m \"Remove dead code\"\ngit push\n</code></pre>"},{"location":"version-1.1.0/#release-de-la-version-110","title":"Release de la version 1.1.0","text":"<p>Faire le n\u00e9cessaire pour cr\u00e9er une version 1.1.0 de l'application :</p> <ul> <li>Cr\u00e9er et valider la pull request <code>feature/add-unit-tests-components</code> vers la branche <code>develop</code>. </li> <li>Cr\u00e9er la branche <code>release/1.1.0</code> \u00e0 partir de la branche <code>develop</code></li> <li>Mettre \u00e0 jour la documentation pour expliquer comment lancer les tests unitaires</li> <li>Cr\u00e9er la pull request <code>release/1.1.0</code> vers la branche <code>main</code></li> <li>V\u00e9rifier que la pull request <code>release/1.1.0</code> est valide, que le d\u00e9ploiement sur netlify est OK et que l'application est fonctionnelle</li> <li>Valider la pull request <code>release/1.1.0</code> pour merger la branche <code>release/1.1.0</code> dans la branche <code>main</code></li> <li>Cr\u00e9er la release <code>v1.1.0</code> sur github</li> <li>Mettre \u00e0 jour la branche <code>develop</code> avec la branche <code>main</code></li> </ul>"},{"location":"version-1.1.0/#conclusion","title":"Conclusion","text":"<p>La mise en oeuvre des tests unitaires permet de fiabiliser l'application, de v\u00e9rifier que le code source est valide et que les fonctionnalit\u00e9s de l'application fonctionnent correctement. Cela permet aussi de d\u00e9tecter les r\u00e9gressions, c'est \u00e0 dire les bugs qui apparaissent suite \u00e0 une modification du code source.</p> <p>Selon les applications, le langage utilis\u00e9, la complexit\u00e9... il n'est pas toujours possible d'atteindre une couverture de code de 100%. Cependant, il est important d'atteindre une couverture de code la plus \u00e9lev\u00e9e possible. Cela permet de fiabiliser l'application et de d\u00e9tecter les bugs le plus t\u00f4t possible. </p> <p>Attention toutefois \u00e0 ne pas chercher \u00e0 atteindre une couverture de code de 100% \u00e0 tout prix. Il est parfois plus pertinent de ne pas tester certaines parties du code, car cela demande trop d'effort pour un gain de fiabilit\u00e9 faible. Il est important de trouver le bon \u00e9quilibre entre la fiabilit\u00e9 et le co\u00fbt de mise en oeuvre des tests unitaires.</p> <p>De plus ce qui ne peut pas \u00eatre test\u00e9 (ou difficillement) par des tests unitaires peut \u00eatre test\u00e9 par d'autres types de tests, comme les tests d'int\u00e9gration ou les tests end-to-end. Nous verrons cela dans les prochaines versions de l'application.</p> <p>Attention aussi, une couverture de code \u00e0 100% ne veut pas dire que l'application est sans bug. Cela veut dire que le code source est valide, mais cela ne veut pas dire que le code source est pertinent. Comme d\u00e9j\u00e0 \u00e9voqu\u00e9, il est possible d'avoir une couverture de code de 100% avec des tests unitaires qui ne testent qu'un seul cas. Typiquement avec le composant <code>App</code>, nous avons un seul test unitaire qui v\u00e9rifie que le composant est rendu. Mais cela ne v\u00e9rifie pas que le composant est rendu avec les bonnes donn\u00e9es.</p> <p>Il existe des m\u00e9canismes qui permettent de v\u00e9rifier que les tests unitaires sont pertinents. C'est le cas par exemple des mutations tests. </p> <p>Le mutation testing consiste \u00e0 modifier le code source pour introduire des bugs. Ensuite on lance les tests unitaires. Si les tests unitaires sont pertinents, ils doivent d\u00e9tecter les bugs introduits. Si les tests unitaires ne d\u00e9tectent pas les bugs, c'est que les tests unitaires ne sont pas pertinents.</p>"},{"location":"version-1.1.0/#aller-plus-loin","title":"Aller plus loin","text":"<ul> <li>Jest</li> <li>Test Driven Development (TDD) : Wikipedia</li> </ul>"},{"location":"version-1.2.0/","title":"Version 1.2.0","text":""},{"location":"version-1.2.0/#objectifs","title":"Objectifs","text":"<p>La version 1.2.0 va apporter les modifications suivantes :</p> <ul> <li>Qualim\u00e9trie du code</li> <li>Tri des personnages par nom ou date de modification</li> <li>Augmentation de la couverture de code</li> </ul> <pre><code>gitGraph\n    checkout main\n    commit tag: \"v1.2.0\"\n    branch develop\n    checkout develop\n    branch feature-sonarcloud\n    checkout feature-sonarcloud\n    commit id: \"workflow\"\n    checkout develop\n    merge feature-sonarcloud\n    branch feature-sort\n    checkout feature-sort\n    commit id: \"sort-api\"\n    commit id: \"sort-ui\"\n    checkout develop\n    merge feature-sort\n    branch feature-coverage\n    checkout feature-coverage\n    commit id: \"coverage\"\n    checkout develop\n    merge feature-coverage\n    branch release-1.2.0\n    checkout release-1.2.0\n    commit id: \"1.2.0.rc1\"\n    commit id: \"doc\"\n    commit id: \"1.2.0\"\n    checkout main\n    merge release-1.2.0\n    commit tag: \"v1.2.0\"\n    checkout develop\n    merge main\n</code></pre>"},{"location":"version-1.2.0/#qualimetrie-du-code","title":"Qualim\u00e9trie du code","text":"<p>La qualit\u00e9 du code est un \u00e9l\u00e9ment important dans le d\u00e9veloppement d'une application. Elle permet de s'assurer que le code est lisible, maintenable et \u00e9volutif. Elle permet aussi de s'assurer que le code est conforme aux bonnes pratiques de d\u00e9veloppement.</p> <p>Il existe de nombreux outils pour mesurer la qualit\u00e9 du code. Dans le cadre de ce projet, nous allons utiliser SonarCloud. SonarCloud est un service cloud qui permet d'analyser la qualit\u00e9 du code d'un projet. Il est gratuit pour les projets open source.</p> <p>Afin de s'int\u00e9grer avec SonarCloud il faut au pr\u00e9alable se cr\u00e9er un compte sur SonarCloud avec un compte GitHub. Puis cr\u00e9er un projet sur SonarCloud en lui associant le repository GitHub.</p>"},{"location":"version-1.2.0/#integration-avec-github","title":"Int\u00e9gration avec GitHub","text":"<p>Afin de pouvoir ajouter un check status, lors d'un Pull Request, sur la qualit\u00e9 de code, nous allons lancer les analyses sonarcloud depuis une github action.</p> <p>Cr\u00e9er la branche <code>feature/sonarcloud</code> :</p> <pre><code>git switch develop\ngit pull\ngit switch -c feature/sonarcloud\n</code></pre> <p>Pour cela, nous allons cr\u00e9er un fichier <code>.github/workflows/quality.yml</code> avec le contenu suivant :</p> <pre><code>name: Quality\non:\n  push:\n  pull_request:\njobs:\n  sonarcloud:\n    name: SonarCloud\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: 'npm'\n      - run: npm ci\n      - run: npm run test:coverage\n      - name: SonarCloud Scan\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n      # Check the Quality Gate status.\n      - name: SonarQube Quality Gate check\n        id: sonarqube-quality-gate-check\n        uses: sonarsource/sonarqube-quality-gate-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n</code></pre> <p>Ce fichier d\u00e9finit une action <code>Quality</code> qui va \u00eatre lanc\u00e9e \u00e0 chaque <code>push</code> ou <code>pull_request</code>. Cette action va :</p> <ul> <li>r\u00e9cup\u00e9rer le code source</li> <li>installer l'environnement node</li> <li>installer les d\u00e9pendances</li> <li>lancer les tests unitaires avec la couverture de code</li> <li>lancer l'analyse sonarcloud</li> <li>v\u00e9rifier que la qualit\u00e9 du code est bonne gr\u00e2ce \u00e0 une Quality Gate</li> </ul> <p>Cette action utilise 2 secrets :</p> <ul> <li><code>GITHUB_TOKEN</code> : ce token est automatiquement cr\u00e9\u00e9 par GitHub et permet d'acc\u00e9der aux informations du repository</li> <li><code>SONAR_TOKEN</code> : ce token est cr\u00e9\u00e9 sur SonarCloud et permet d'acc\u00e9der aux informations du projet</li> </ul> <p>Afin de g\u00e9n\u00e9rer le token SonarCloud, il faut se rendre sur SonarCloud et aller dans <code>My Account</code> &gt; <code>Security</code> &gt; <code>Generate Tokens</code>. Il faut ensuite ajouter le token dans les secrets du repository GitHub (Settings &gt; Secrets and variables &gt; New repository secret).</p> <p>Il faut aussi d\u00e9cocher la case <code>Automatic Analysis</code> dans <code>Administration</code> &gt; <code>Analysis Method</code> sur SonarCloud.</p>"},{"location":"version-1.2.0/#configuration-de-sonarcloud","title":"Configuration de SonarCloud","text":"<p>Afin de faire le lien entre projet GitHub et projet SonarCloud, il faut ajouter un fichier <code>sonar-project.properties</code> \u00e0 la racine du projet avec le contenu suivant :</p> <pre><code>sonar.projectKey=nom-du-projet\nsonar.organization=nom-de-compte-github\n\nsonar.javascript.lcov.reportPaths=./coverage/lcov.info\nsonar.coverage.exclusions=**/*.test.js\n</code></pre> <p>Ce fichier d\u00e9finit les propri\u00e9t\u00e9s du projet SonarCloud :</p> <ul> <li><code>sonar.projectKey</code> : identifiant du projet SonarCloud</li> <li><code>sonar.organization</code> : organisation SonarCloud</li> <li><code>sonar.javascript.lcov.reportPaths</code> : chemin vers le fichier de couverture de code</li> <li><code>sonar.coverage.exclusions</code> : fichiers \u00e0 exclure de la couverture de code</li> </ul> <p>Les informations <code>sonar.projectKey</code> et <code>sonar.organization</code> sont disponibles sur la page du projet SonarCloud dans la section Information.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add .github/workflows/quality.yml\ngit add sonar-project.properties\ngit commit -m \"Add sonarcloud analysis\"\ngit push --set-upstream origin feature/sonarcloud\n</code></pre>"},{"location":"version-1.2.0/#verification-de-la-qualite-du-code","title":"V\u00e9rification de la qualit\u00e9 du code","text":"<p>A chaque push, une analyse de la qualit\u00e9 du code est lanc\u00e9e. Elle est visible dans l'onglet <code>Actions</code> du repository, si le code ne passe pas la Quality Gate, l'action est en erreur. Il faut alors corriger les probl\u00e8mes de qualit\u00e9 du code. On peut aussi voir l'analyse sur SonarCloud.</p> <p>Nous n'avons pas d\u00e9fini de Quality Gate personnalis\u00e9e, nous utilisons donc la Quality Gate par d\u00e9faut de SonarCloud. Il serait possible de d\u00e9finir une Quality Gate personnalis\u00e9e, mais cela n'est pas n\u00e9cessaire dans le cadre de ce projet.</p> <p>La Quality Gate par d\u00e9faut de SonarCloud poss\u00e8de les crit\u00e8res suivants :</p> <ul> <li>Coverage : 80%, il ne faut pas que la couverture de code soit inf\u00e9rieure \u00e0 80%</li> <li>Duplicated Lines : 3%, il ne faut pas que le code dupliqu\u00e9 soit sup\u00e9rieur \u00e0 3%, si l'on poss\u00e8de du code dupliqu\u00e9, il faut le factoriser gr\u00e2ce \u00e0 des fonctions.</li> <li>Maintainability Rating : A, il faut que la note de maintenabilit\u00e9 soit sup\u00e9rieure \u00e0 A, si la note est inf\u00e9rieure \u00e0 A, il faut am\u00e9liorer la qualit\u00e9 du code. La note de maintenabilit\u00e9 est calcul\u00e9e \u00e0 partir de la complexit\u00e9 du code, de la taille du code, etc...</li> <li>Reliability Rating : A, il faut que la note de fiabilit\u00e9 soit sup\u00e9rieure \u00e0 A, si la note est inf\u00e9rieure \u00e0 A, il faut am\u00e9liorer la qualit\u00e9 du code. La note de fiabilit\u00e9 est calcul\u00e9e \u00e0 partir de la pr\u00e9sence de bugs, de la pr\u00e9sence de code mort, etc...</li> <li>Security Rating : A, il faut que la note de s\u00e9curit\u00e9 soit sup\u00e9rieure \u00e0 A, si la note est inf\u00e9rieure \u00e0 A, il faut am\u00e9liorer la qualit\u00e9 du code. La note de s\u00e9curit\u00e9 est calcul\u00e9e \u00e0 partir de la pr\u00e9sence de failles de s\u00e9curit\u00e9, etc...</li> <li>Security Hotspots Reviewed : 0, il ne faut pas de failles de s\u00e9curit\u00e9, si il y en a, il faut les corriger.</li> </ul> <p>Si le code ne passe pas la Quality Gate, il faut corriger les probl\u00e8mes de qualit\u00e9 du code. Il peut \u00eatre n\u00e9cessaire de modifier le code, d'ajouter des tests unitaires, de factoriser du code, etc...</p> <p>Une fois l'action <code>Quality</code> pass\u00e9e une premi\u00e8re fois, nous pouvons ajouter ce nouveau check status dans la protection des branches <code>main</code> et <code>develop</code>.</p> <p>Nous avons maintenant des contr\u00f4les de qualit\u00e9 du code \u00e0 chaque push et pull request. </p> <p>Faire le n\u00e9cessaire pour merger la branche <code>feature/sonarcloud</code> dans <code>develop</code>(pull request, review, merge).</p>"},{"location":"version-1.2.0/#tri-des-personnages-par-nom-ou-date-de-modification","title":"Tri des personnages par nom ou date de modification","text":"<p>Cr\u00e9er la branche <code>feature/sort</code> :</p> <pre><code>git switch develop\ngit pull\ngit switch -c feature/sort\n</code></pre>"},{"location":"version-1.2.0/#modification-de-lui","title":"Modification de l'UI","text":"<p>Modifier le fichier <code>src/pages/CharactersPage.js</code> pour ajouter les param\u00e8tres <code>orderBy</code> et <code>order</code> :</p> <pre><code>import React, { useState } from 'react';\nimport { CharactersList } from \"../components/CharactersList\";\nimport { NumberOfCharacters } from \"../components/NumberOfCharacters\";\n\nimport { useLoaderData } from 'react-router';\nimport { useSearchParams } from 'react-router-dom';\n\nconst CharactersPage = () =&gt; {\n    // change the title of the page\n    document.title = \"Marvel App\";\n\n    // retrieve the characters using the useLoaderData hook\n    const characters = useLoaderData();\n\n    // Get the search params from the URL\n    let [searchParams, setSearchParams] = useSearchParams();\n\n    // Get the order and orderBy from the search params or set the default values\n    const [order, setOrder] = useState(searchParams.get('order') || 'asc')\n    const [orderBy, setOrderBy] = useState(searchParams.get('orderBy') || 'name')\n\n    // Update the search params when the order or orderBy state changes\n    React.useEffect(() =&gt; {\n        setSearchParams({ order, orderBy })\n    }, [order, orderBy, setSearchParams])\n\n    return (\n        &lt;&gt;\n            &lt;h2&gt;Marvel Characters&lt;/h2&gt;\n            {/* Sort by  */}\n            &lt;label htmlFor=\"sort\"&gt;Sort by:&lt;/label&gt;\n            &lt;select data-testid='orderBy' value={orderBy} onChange={(e) =&gt; setOrderBy(e.target.value)}&gt;\n                &lt;option value=\"name\"&gt;Name&lt;/option&gt;\n                &lt;option value=\"modified\"&gt;Modified&lt;/option&gt;\n            &lt;/select&gt;   \n            &amp;nbsp;\n            {/* Order */}\n            &lt;label htmlFor=\"order\"&gt;Order:&lt;/label&gt;\n            &lt;select data-testid='order' value={order} onChange={(e) =&gt; setOrder(e.target.value)}&gt;\n                &lt;option value=\"asc\"&gt;Ascending&lt;/option&gt;\n                &lt;option value=\"desc\"&gt;Descending&lt;/option&gt;\n            &lt;/select&gt;         \n            &lt;CharactersList characters={characters} /&gt;\n            &lt;br /&gt;\n            &lt;NumberOfCharacters characters={characters} /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default CharactersPage;\n</code></pre> <p>On utilise le hook <code>useSearchParams</code> pour r\u00e9cup\u00e9rer les param\u00e8tres de l'URL. </p> <p>Le hook <code>useSearchParams</code> retourne un tableau avec 2 \u00e9l\u00e9ments :</p> <ul> <li>le premier \u00e9l\u00e9ment est un objet qui permet de r\u00e9cup\u00e9rer les param\u00e8tres de l'URL</li> <li>le second \u00e9l\u00e9ment est une fonction qui permet de mettre \u00e0 jour les param\u00e8tres de l'URL</li> </ul> <p>Ensuite le hook <code>useState</code> permet de g\u00e9rer les param\u00e8tres <code>orderBy</code> et <code>order</code> en les stockant dans le state. </p> <p>On utilise le hook <code>useEffect</code> pour mettre \u00e0 jour les param\u00e8tres de l'URL lorsque les param\u00e8tres <code>orderBy</code> et <code>order</code> changent.</p> <p>Modifier le fichier de test <code>src/App.test.js</code> :</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport App from './App';\nimport { act } from 'react-dom/test-utils';\n\ntest('render Marvel App', async () =&gt; {\n  await act(() =&gt; {\n    render(&lt;App /&gt;);\n  });\n\n\n  const h1Element = screen.getByRole('heading', { level: 1, name: \"Marvel App\" });\n  expect(h1Element).toBeInTheDocument();\n});\n</code></pre> <p>Modifier le fichier de test <code>src/pages/CharactersPage.test.js</code> :</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport CharactersPage from './CharactersPage';\nimport { BrowserRouter, MemoryRouter } from 'react-router-dom';\nimport { act } from 'react-dom/test-utils';\n\nconst characters = [\n    {\n        id: \"1\",\n        name: \"Thor\"\n    }\n];\n\n// mock the useLoaderData hook, so that we can test the CharactersPage component\njest.mock('react-router', () =&gt; ({\n    ...jest.requireActual('react-router'), // use actual for all non-hook parts\n    useLoaderData: () =&gt; {\n        return characters;\n    },\n}));\n\ndescribe('CharactersPage', () =&gt; {\n\n    test('render CharactersPage component with default order and orderBy', () =&gt; {\n        // when\n\n        // then\n        render(\n            &lt;MemoryRouter initialEntries={[`/`]} &gt;\n                &lt;CharactersPage /&gt;\n            &lt;/MemoryRouter&gt;\n        );\n\n        // expect the document title to be \"Marvel App\"\n        expect(document.title).toBe('Marvel App');\n\n\n        // expect the heading 'Marvel Characters' to be in the document\n        const h2Element = screen.getByRole('heading', { level: 2, name: \"Marvel Characters\" });\n        expect(h2Element).toBeInTheDocument();\n\n        // expect the character Thor to be in the document\n        const thorElement = screen.getByText(characters[0].name);\n        expect(thorElement).toBeInTheDocument();\n\n        // expect the number of characters to be in the document\n        const numberOfCharactersElement = screen.getByText(`There is ${characters.length} character`);\n        expect(numberOfCharactersElement).toBeInTheDocument();\n    });\n\n    test('render CharactersPage component with order and orderBy from search params', async () =&gt; {\n        // when\n        const order = 'desc';\n        const orderBy = 'modified';\n\n        // then\n        render(\n            &lt;MemoryRouter initialEntries={[`/?order=${order}&amp;orderBy=${orderBy}`]} &gt;\n                &lt;CharactersPage /&gt;\n            &lt;/MemoryRouter&gt;\n        );\n\n        // expect the document title to be \"Marvel App\"\n        expect(document.title).toBe('Marvel App');\n\n        // expect the heading 'Marvel Characters' to be in the document\n        const h2Element = screen.getByRole('heading', { level: 2, name: \"Marvel Characters\" });\n        expect(h2Element).toBeInTheDocument();\n\n        // expect the character Thor to be in the document\n        const thorElement = screen.getByText(characters[0].name);\n        expect(thorElement).toBeInTheDocument();\n\n        // expect the number of characters to be in the document\n        const numberOfCharactersElement = screen.getByText(`There is ${characters.length} character`);\n        expect(numberOfCharactersElement).toBeInTheDocument();\n\n\n        const orderSelect = screen.getByTestId('order');\n        expect(orderSelect).toHaveValue(order);\n\n        // expect the orderBy select to have the value from the search params\n        const orderBySelect = screen.getByTestId('orderBy');\n        expect(orderBySelect).toHaveValue(orderBy);\n    });\n\n    test('render CharactersPage component with order and orderBy when the select changes', async () =&gt; {\n        // when\n        const order = 'desc';\n        const orderBy = 'modified';\n\n        // then\n        render(\n            &lt;MemoryRouter initialEntries={[`/`]} &gt;\n                &lt;CharactersPage /&gt;\n            &lt;/MemoryRouter&gt;\n        );\n\n        // when\n        await act(() =&gt; {\n            // change the order select to desc\n            const orderSelect = screen.getByTestId('order');\n            orderSelect.value = order;\n            orderSelect.dispatchEvent(new Event('change', { bubbles: true }));\n\n            // then\n            expect(orderSelect).toHaveValue(order);\n\n            // change the orderBy select to modified\n            const orderBySelect = screen.getByTestId('orderBy');\n            orderBySelect.value = orderBy;\n            orderBySelect.dispatchEvent(new Event('change', { bubbles: true }));\n\n            // then\n            expect(orderBySelect).toHaveValue(orderBy);\n        });\n    });\n});\n</code></pre> <p>On utilise le composant <code>MemoryRouter</code> pour tester les param\u00e8tres de l'URL. Le composant <code>MemoryRouter</code> permet de simuler un router sans avoir besoin d'un navigateur. </p> <p>On utilise le composant <code>act</code> pour tester les changements de valeur des <code>select</code>, on simule ainsi une action de l'utilisateur.</p> <p>On peut maintenant r\u00e9cup\u00e9rer les param\u00e8tres <code>orderBy</code> et <code>order</code> dans l'URL et les utiliser pour trier les personnages.</p> <p>Modifier le fichier <code>src/routes.js</code> pour ajouter les param\u00e8tres <code>orderBy</code> et <code>order</code> :</p> <pre><code>import Layout from \"./Layout\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ContactPage from \"./pages/ContactPage\";\nimport CharactersPage from \"./pages/CharactersPage\";\n\nimport CharacterDetailPage from \"./pages/CharacterDetailPage\";\nimport { getCharacterById, getCharacters } from \"./api/character-api\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;Layout /&gt;,\n        children: [\n            {\n                path: \"/\",\n                element: &lt;CharactersPage /&gt;,\n                loader: ({request}) =&gt; {\n                    const url = new URL(request.url);\n                    const orderBy = url.searchParams.get(\"orderBy\");\n                    const order = url.searchParams.get(\"order\");\n\n                    if (orderBy &amp;&amp; order) {\n                        return getCharacters(orderBy, order);\n                    }else{\n                        return getCharacters();\n                    }\n                },\n            },\n            {\n                path: \"/characters/:id\",\n                element: &lt;CharacterDetailPage /&gt;,\n                loader: ({ params }) =&gt; getCharacterById(params.id),\n            },\n            { \n                path: \"/about\", \n                element: &lt;AboutPage /&gt; \n            },\n            { \n                path: \"/contact\", \n                element: &lt;ContactPage /&gt; \n            },\n        ],\n    },\n];\n\nexport default routes;\n</code></pre> <p>On utilise le composant <code>URL</code> pour r\u00e9cup\u00e9rer les param\u00e8tres <code>orderBy</code> et <code>order</code> de l'URL. On les passe ensuite \u00e0 la fonction <code>getCharacters</code> de l'API.</p> <p>V\u00e9rifier que les tests passent et que l'application fonctionne correctement, si ce n'est pas le cas, corriger les probl\u00e8mes. </p> <p>Remarque: La fonction <code>getCharacters</code> de l'API ne g\u00e8re pas encore les param\u00e8tres <code>orderBy</code> et <code>order</code>, nous allons les ajouter dans la prochaine partie, il est donc normal que le tri ne fonctionne pas encore.</p> <p>Une fois que tout est ok, commiter et pusher les modifications :</p> <pre><code>git add src/pages/CharactersPage.js\ngit add src/App.test.js\ngit add src/pages/CharactersPage.test.js\ngit add src/routes.js\ngit commit -m \"Add sort by and order in CharactersPage\"\ngit push --set-upstream origin feature/sort\n</code></pre>"},{"location":"version-1.2.0/#modification-de-lapi","title":"Modification de l'API","text":"<p>Modifier le fichier <code>src/api/character-api.js</code> pour ajouter les param\u00e8tres <code>orderBy</code> et <code>order</code> \u00e0 la fonction <code>getCharacters</code> :</p> <pre><code>const characters = require('../data/characters.json');\n\n/**\n * Get all characters from json file\n * @returns \n */\nfunction getCharacters(orderBy = 'name', order = 'asc') {\n    // Sort characters by name\n    let sortedCharacters = characters.sort((a, b) =&gt; {\n        if (orderBy === 'name') {\n            return a.name.localeCompare(b.name)\n        } else if (orderBy === 'modified') {\n            return new Date(b.modified) - new Date(a.modified)\n        } else {\n            throw new Error(`Invalid orderBy parameter: ${orderBy}`)\n        }\n    })\n\n    // Reverse the order if it is descending\n    if (order === 'desc') {\n        sortedCharacters.reverse()\n    }\n\n    return sortedCharacters\n}\n\n/**\n * Get character by id\n * @param {number} id \n * @returns \n */\nfunction getCharacterById(id) {\n    // If id is a number, convert it to string\n    if (typeof id === 'number') {\n        id = id.toString()\n    }\n\n    if (typeof id !== 'string') {\n        throw new Error(`Parameter id must be a number or a string, but it was ${typeof id}`)\n    }\n\n    // Find character by id\n    const character = characters.find((character) =&gt; character.id === id)\n\n    // Throw error if character is not found\n    if (!character) {\n        throw new Error(`Character with id ${id} not found`)\n    }\n    return character\n}\n\nmodule.exports = {\n    getCharacters,\n    getCharacterById\n}\n</code></pre> <p>On utilise les param\u00e8tres <code>orderBy</code> et <code>order</code> pour trier les personnages. La fonction <code>sort</code> permet de trier un tableau. On utilise la fonction <code>localeCompare</code> pour trier les personnages par nom, la fonction <code>Date</code> pour trier les personnages par date de modification. La fonction <code>sort</code> trie les \u00e9l\u00e9ments en fonction du r\u00e9sultat de la fonction de comparaison.</p> <p>On utilise la fonction <code>reverse</code> pour inverser l'ordre des personnages si l'ordre est <code>desc</code>.</p> <p>Voir la documentation de la fonction <code>sort</code> ici.</p> <p>Modifier le fichier de <code>src/api/character-api.test.js</code> pour prendre en compte les param\u00e8tres <code>orderBy</code> et <code>order</code> :</p> <pre><code>const { getCharacters, getCharacterById } = require('./character-api');\nconst fs = require('fs');\n\ndescribe('character-api', () =&gt; {\n  const expected = JSON.parse(fs.readFileSync('src/data/characters.json', 'utf8'));\n\n  describe('getCharacters', () =&gt; {\n    it('returns all characters sorted by name ascending by default', () =&gt; {\n      // when\n\n      // then\n      const characters = getCharacters();\n\n      // expect the first character to be Beast\n      expect(characters[0].name).toBe('Beast');\n\n      // expect the last character to be Wolverine\n      expect(characters[characters.length - 1].name).toBe('Wolverine');\n    });\n\n    it('returns all characters sorted by modified descending', () =&gt; {\n      // when\n\n      // then\n      const characters = getCharacters('modified', 'desc');\n\n      // expect the first character to be Wolverine\n      expect(characters[0].name).toBe('Groot');\n\n      // expect the last character to be Beast\n      expect(characters[characters.length - 1].name).toBe('Hulk');\n    });\n\n    it('throws an error if orderBy is invalid', () =&gt; {\n      // when\n      const orderBy = 'foo';\n\n      // then\n      expect(() =&gt; {\n        getCharacters(orderBy);\n      }).toThrow(`Invalid orderBy parameter: ${orderBy}`);\n    });\n\n  });\n\n  describe('getCharacterById', () =&gt; {\n    test('returns the character with the given id when id is a string', () =&gt; {\n      // when\n      const id = \"1009663\";\n      const name = \"Thor\";\n\n      // then\n      const character = getCharacterById(id);\n\n      // expect\n      expect(character.id).toBe(id);\n      expect(character.name).toBe(name);\n    });\n\n    test('returns the character with the given id when id is a number', () =&gt; {\n      // when\n      const id = 1009663;\n      const name = \"Thor\";\n\n      // then\n      const character = getCharacterById(id);\n\n      // expect\n      expect(character.id).toBe(id.toString());\n      expect(character.name).toBe(name);\n    });\n\n    test('throws an error if id is not provided', () =&gt; {\n      expect(() =&gt; {\n        getCharacterById();\n      }).toThrow(`Parameter id must be a number or a string, but it was undefined`);\n    });\n\n    test('throws an error if id is not a number or a string', () =&gt; {\n      expect(() =&gt; {\n        getCharacterById({});\n      }).toThrow(`Parameter id must be a number or a string, but it was object`);\n    });\n\n    test('throws an error if character with given id is not found', () =&gt; {\n      const id = 999;\n      expect(() =&gt; {\n        getCharacterById(id);\n      }).toThrow(`Character with id ${id} not found`);\n    });\n  });\n});\n</code></pre> <p>V\u00e9rifier que les tests passent et que l'application fonctionne correctement, si ce n'est pas le cas, corriger les probl\u00e8mes. Maintenant le tri des personnages devrait fonctionner correctement.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add src/api/character-api.js\ngit add src/api/character-api.test.js\ngit commit -m \"Add sort by and order in character-api\"\ngit push --set-upstream origin feature/sort\n</code></pre> <p>Cr\u00e9er la pull request <code>feature/sort</code> afin de voir si le nouveau code passe bien les diff\u00e9rents contr\u00f4les (tests unitaires, qualit\u00e9 du code). Une fois la pull request valid\u00e9e, merger la branche <code>feature/sort</code> dans <code>develop</code>.</p>"},{"location":"version-1.2.0/#augmentation-de-la-couverture-de-code","title":"Augmentation de la couverture de code","text":"<p>Il reste encore des parties du code qui ne sont pas couvertes par les tests unitaires. Nous allons augmenter la couverture de code afin d'avoir une couverture de code la plus haute possible.</p> <p>Cr\u00e9er la branche <code>feature/coverage</code> :</p> <pre><code>git switch develop\ngit pull\ngit switch -c feature/coverage\n</code></pre>"},{"location":"version-1.2.0/#srccomponents","title":"src/components","text":"<p>Modifier le fichier <code>src/components/CharacterDetail.test.js</code> pour ajouter les tests unitaires manquants :</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport { CharactersList } from './CharactersList';\nimport { BrowserRouter } from 'react-router-dom'\nimport CharacterDetail from './CharacterDetail';\n\ndescribe('CharactersDetail', () =&gt; {\n    it('renders the character detail', () =&gt; {\n        // when \n        const character = {\n            id: \"1\",\n            name: \"Thor\",\n            description: \"Thor description\",\n            thumbnail: {\n                path: \"https://foo.bar\",\n                extension: \"jpg\"\n            }\n        }\n\n        // then\n        render(&lt;CharacterDetail character={character} /&gt;, { wrapper: BrowserRouter });  \n\n        // expect a heading with the character name\n        const h2Element = screen.getByRole('heading', { level: 2, name: character.name });\n        expect(h2Element).toBeInTheDocument();\n\n        // expect a paragraph with the character description\n        const pElement = screen.getByText(character.description);\n        expect(pElement).toBeInTheDocument();\n\n        // expect an image with the character thumbnail\n        const imgElement = screen.getByRole('img', { name: character.name });\n        expect(imgElement).toBeInTheDocument();\n        expect(imgElement).toHaveAttribute('src', `${character.thumbnail.path}/standard_large.${character.thumbnail.extension}`);\n    });\n\n    it('renders the character detail without a thumbnail', () =&gt; {\n        // when \n        const character = {\n            id: \"1\",\n            name: \"Thor\",\n            description: \"Thor description\",\n        }\n\n        // then\n        render(&lt;CharacterDetail character={character} /&gt;, { wrapper: BrowserRouter });  \n\n        // expect a heading with the character name\n        const h2Element = screen.getByRole('heading', { level: 2, name: character.name });\n        expect(h2Element).toBeInTheDocument();\n\n        // expect a paragraph with the character description\n        const pElement = screen.getByText(character.description);\n        expect(pElement).toBeInTheDocument();\n\n        // expect no image\n        const imgElement = screen.queryByRole('img', { name: character.name });\n        expect(imgElement).not.toBeInTheDocument();\n    });\n\n    it('renders nothing when no character is provided', () =&gt; {\n        // when\n\n        // then\n        render(&lt;CharacterDetail /&gt;, { wrapper: BrowserRouter });  \n\n        // expect empty h2 element\n        const h2Element = screen.queryByRole('heading', { level: 2 });\n        expect(h2Element).toBeEmptyDOMElement();        \n    });\n});\n</code></pre>"},{"location":"version-1.2.0/#srcpages","title":"src/pages","text":"<p>Modifier le fichier <code>src/pages/ContactPage.test.js</code> :</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport ContactPage from './ContactPage';\n\ntest('renders Contact us message', () =&gt; {\n    // when\n\n    // then\n    render(&lt;ContactPage /&gt;);\n\n    // expect the document title to be \"Contact | Marvel App\"\n    expect(document.title).toEqual(\"Contact | Marvel App\");\n\n    // expect the heading and the paragraph to be in the document\n    const h2Element = screen.getByRole('heading', { level: 2, name: \"Contact Us\" });\n    const pElement = screen.getByText('Feel free to contact us at');\n\n    expect(h2Element).toBeInTheDocument();\n    expect(pElement).toBeInTheDocument();\n\n    // expect to have a mailto link\n    const mailAddress = \"marvelApp@gmail.com\";\n    const mailtoLink = screen.getByRole('link', { name: mailAddress });\n    expect(mailtoLink).toBeInTheDocument();\n    expect(mailtoLink).toHaveAttribute('href', `mailto:${mailAddress}`);\n    expect(mailtoLink).toHaveTextContent(mailAddress);\n});\n</code></pre> <p>La couverture de code est maintenant \u00e0 100% pour les fichiers <code>src/components</code> et <code>src/pages</code>.</p> <p>Commiter et pusher les modifications :</p> <pre><code>git add src/components/CharacterDetail.test.js\ngit add src/pages/ContactPage.test.js\ngit commit -m \"Add missing unit tests\"\ngit push --set-upstream origin feature/coverage\n</code></pre>"},{"location":"version-1.2.0/#release-120","title":"Release 1.2.0","text":"<p>Faire le n\u00e9cessaire pour cr\u00e9er la release <code>1.2.0</code> contenant l'ensemble des modifications de la version 1.2.0.</p> <p>Puis \u00e0 mettre \u00e0 jour les branches <code>main</code> et <code>develop</code>.</p>"},{"location":"version-1.3.0/","title":"Version 1.3.0","text":""},{"location":"version-1.3.0/#objectifs","title":"Objectifs","text":"<ul> <li>Am\u00e9lioration du code<ul> <li>Correction des \u00e9ventuelles <code>Bugs</code> et <code>Code Smells</code> identifi\u00e9s par SonarQube</li> <li>Am\u00e9lioration de la couverture de test</li> </ul> </li> <li>Cr\u00e9ation d'un pie chart pour visualiser les capacit\u00e9s des personnages<ul> <li>Impl\u00e9mentation avec la librairie <code>d3.js</code></li> <li>Impl\u00e9mentation avec la librairie <code>recharts</code></li> </ul> </li> </ul>"},{"location":"version-1.3.0/#amelioration-du-code","title":"Am\u00e9lioration du code","text":"<p>Bug et Code Smells</p> <p>Corriger les \u00e9ventuelles <code>Bugs</code> et <code>Code Smells</code> identifi\u00e9s par SonarQube. Sonarqube explique comment corriger une issue dans l'onglet <code>How can I fix it ?</code>. github copilot peut vous aider dans cette t\u00e2che, attention toutefois de v\u00e9rifier le code g\u00e9n\u00e9r\u00e9 par github copilot, il peut \u00eatre incomplet ou incorrect.</p> <p>Afin de corriger l'issue <code>Refactor the redundant 'await' on a non-promise</code> pour le fichier <code>src/App.test.js</code> appliquer la solution suivante:</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport App from './App';\nimport { act } from 'react-dom/test-utils';\n\ntest('render Marvel App', async () =&gt; {\n  await act(async() =&gt; {\n    render(&lt;App /&gt;);\n  });\n\n  const h1Element = screen.getByRole('heading', { level: 1, name: \"Marvel App\" });\n  expect(h1Element).toBeInTheDocument();\n});\n</code></pre> <p>Le mot cl\u00e9 <code>async</code> est ajout\u00e9 \u00e0 la fonction <code>act</code> afin de rendre la fonction <code>test</code> asynchrone. </p> <p>Couverture de test</p> <p>Am\u00e9liorer la couverture de test, github copilot peut vous aider \u00e0 \u00e9crire les tests manquants (bouton droit sur le fichier puis <code>Copilot / Generate tests</code>). Comme pour les <code>Bugs</code> et <code>Code Smells</code> identifi\u00e9s par SonarQube, attention \u00e0 bien v\u00e9rifier le code g\u00e9n\u00e9r\u00e9 par github copilot et \u00e0 le modifier afin d'ajouter les v\u00e9rifications n\u00e9cessaires.</p>"},{"location":"version-1.3.0/#visualisation-des-donnees","title":"Visualisation des donn\u00e9es","text":"<p>Modifier le fichier <code>src/data/characters.json</code> afin d'ajouter des donn\u00e9es sur les capacit\u00e9s des personnages.</p> <pre><code>[\n    {\n        \"id\": \"1009175\",\n        \"name\": \"Beast\",\n        \"description\": \"\",\n        \"modified\": \"2014-01-13T14:48:32-0500\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/2/80/511a79a0451a3\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 5,\n            \"intelligence\": 8,\n            \"durability\": 6,\n            \"energy\": 6,\n            \"speed\": 1,\n            \"fighting\": 3\n        }\n    },\n    {\n        \"id\": \"1009220\",\n        \"name\": \"Captain America\",\n        \"description\": \"Vowing to serve his country any way he could, young Steve Rogers took the super soldier serum to become America's one-man army. Fighting for the red, white and blue for over 60 years, Captain America is the living, breathing symbol of freedom and liberty.\",\n        \"modified\": \"2020-04-04T19:01:59-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/3/50/537ba56d31087\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 4,\n            \"intelligence\": 3,\n            \"durability\": 3,\n            \"energy\": 1,\n            \"speed\": 2\n        }\n    },\n    {\n        \"id\": \"1009268\",\n        \"name\": \"Deadpool\",\n        \"modified\": \"2020-04-04T19:02:15-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/9/90/5261a86cacb99\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 4,\n            \"intelligence\": 3,\n            \"durability\": 2,\n            \"energy\": 1,\n            \"speed\": 2\n        }\n    },\n    {\n        \"id\": \"1010743\",\n        \"name\": \"Groot\",\n        \"description\": \"\",\n        \"modified\": \"2013-10-17T15:01:37-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/3/10/526033c8b474a\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 6,\n            \"intelligence\": 1,\n            \"durability\": 7,\n            \"energy\": 1,\n            \"speed\": 1\n        }\n    },\n    {\n        \"id\": \"1009351\",\n        \"name\": \"Hulk\",\n        \"description\": \"Caught in a gamma bomb explosion while trying to save the life of a teenager, Dr. Bruce Banner was transformed into the incredibly powerful creature called the Hulk. An all too often misunderstood hero, the angrier the Hulk gets, the stronger the Hulk gets.\",\n        \"modified\": \"2020-07-21T10:35:15-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/5/a0/538615ca33ab0\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 7,\n            \"intelligence\": 6,\n            \"durability\": 7,\n            \"energy\": 1,\n            \"speed\": 3\n        }\n    },\n    {\n        \"id\": \"1009368\",\n        \"name\": \"Iron Man\",\n        \"description\": \"Wounded, captured and forced to build a weapon by his enemies, billionaire industrialist Tony Stark instead created an advanced suit of armor to save his life and escape captivity. Now with a new outlook on life, Tony uses his money and intelligence to make the world a safer, better place as Iron Man.\",\n        \"modified\": \"2016-09-28T12:08:19-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/9/c0/527bb7b37ff55\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 6,\n            \"intelligence\": 6,\n            \"durability\": 6,\n            \"energy\": 6,\n            \"speed\": 5\n        }\n    },\n    {\n        \"id\": \"1010744\",\n        \"name\": \"Rocket Raccoon\",\n        \"description\": \"A genetically-engineered alien with a knack for big guns and fast ships, Rocket serves as the backbone of the Guardians of the Galaxy!\",\n        \"modified\": \"2014-07-17T17:32:43-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/9/b0/50fec1e49298a\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 2,\n            \"intelligence\": 2,\n            \"durability\": 2,\n            \"energy\": 1,\n            \"speed\": 2\n        }\n    },\n    {\n        \"id\": \"1009592\",\n        \"name\": \"Silver Surfer\",\n        \"description\": \"When Zenn-La was threatened by the world-devouring entity known as Galactus, Norrin Radd stood up for his home planet and offered to work for Galactus, finding him new planets to eat, in exchange for saving his own. Years later, the Surfer has protected Earth and many other planets, becoming one of the greatest heroes in the universe.\",\n        \"modified\": \"2013-11-07T10:48:53-0500\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/3/50/527bb6490a176\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 6,\n            \"intelligence\": 4,\n            \"durability\": 7,\n            \"energy\": 7,\n            \"speed\": 7\n        }\n    },\n    {\n        \"id\": \"1009697\",\n        \"name\": \"Thanos\",\n        \"modified\": \"2016-05-05T15:35:19-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/6/40/5274137e3e2cd\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 7,\n            \"intelligence\": 6,\n            \"durability\": 6,\n            \"energy\": 7,\n            \"speed\": 6\n        }\n    },\n    {\n        \"id\": \"1009663\",\n        \"name\": \"Thor\",\n        \"modified\": \"2020-03-11T10:18:57-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/d/d0/5269657a74350\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 7,\n            \"intelligence\": 2,\n            \"durability\": 7,\n            \"energy\": 6,\n            \"speed\": 7\n        }\n    },\n    {\n        \"id\": \"1009718\",\n        \"name\": \"Wolverine\",\n        \"modified\": \"2016-05-02T12:21:44-0400\",\n        \"thumbnail\": {\n            \"path\": \"http://i.annihil.us/u/prod/marvel/i/mg/2/60/537bcaef0f6cf\",\n            \"extension\": \"jpg\"\n        },\n        \"capacities\": {\n            \"force\": 4,\n            \"intelligence\": 2,\n            \"durability\": 4,\n            \"energy\": 1,\n            \"speed\": 2\n        }\n    }\n]\n</code></pre> <p>Cr\u00e9er le module utilitaire <code>src/components/chart-utils.js</code> qui contiendra les fonctions utilitaires permettant de transformer les donn\u00e9es pour les rendre compatibles avec <code>d3.js</code> et <code>recharts</code>.</p> <pre><code>/**\n * Prepare the data for the pie chart\n * @param {*} data \n * @returns \n */\nexport const prepareData = (data = []) =&gt; {\n    const transformData = [\n        { name: 'Force', value: data?.force },\n        { name: 'Intelligence', value: data?.intelligence },\n        { name: 'Energy', value: data?.energy },\n        { name: 'Speed', value: data?.speed },\n        { name: 'Durability', value: data?.durability },\n        { name: 'Fighting', value: data?.fighting }\n    ];\n\n    // Remove the elements with undefined values\n    return transformData.filter((element) =&gt; { return element.value !== undefined; });\n}\n</code></pre> <p>La fonction <code>prepareData</code> prend en param\u00e8tre les donn\u00e9es \u00e0 afficher. Elle retourne un tableau avec les donn\u00e9es au format attendu par <code>d3.js</code> (un tableau d'objets avec les propri\u00e9t\u00e9s <code>name</code> et <code>value</code>) en supprimant les donn\u00e9es avec une valeur <code>undefined</code>. </p> <p>Le fait d'externaliser cette fonction permettra de l'utiliser dans les deux impl\u00e9mentations du pie chart. Mais aussi de la tester unitairement.</p> <p>Cr\u00e9er le test unitaire <code>src/components/chart-utils.test.js</code> pour tester la fonction <code>prepareData</code>.</p> <pre><code>import { prepareData } from \"./chart-utils\";\n\ndescribe('prepareData', () =&gt; {\n    test('prepareData with empty data', () =&gt; {\n        // given\n        const data = {};\n\n        // when\n        const preparedData = prepareData(data);\n\n        // then\n        expect(preparedData).toEqual([]);\n    });\n\n    test('prepareData with data', () =&gt; {\n        // given\n        const data = {\n            force: 10,\n            intelligence: 20,\n            energy: 30,\n            speed: 40,\n            durability: 50,\n            fighting: 60,\n        };\n\n        // when\n        const preparedData = prepareData(data);\n\n        // then\n        expect(preparedData).toEqual([\n            { name: 'Force', value: 10 },\n            { name: 'Intelligence', value: 20 },\n            { name: 'Energy', value: 30 },\n            { name: 'Speed', value: 40 },\n            { name: 'Durability', value: 50 },\n            { name: 'Fighting', value: 60 },\n        ]);\n    });\n\n    test('prepareData with data with undefined values', () =&gt; {\n        // given\n        const data = {\n            force: undefined,\n            intelligence: 20,\n            energy: 30,\n            speed: 40,\n            durability: undefined,\n            fighting: 60,\n        };\n\n        // when\n        const preparedData = prepareData(data);\n\n        // then\n        expect(preparedData).toEqual([\n            { name: 'Intelligence', value: 20 },\n            { name: 'Energy', value: 30 },\n            { name: 'Speed', value: 40 },\n            { name: 'Fighting', value: 60 },\n        ]);\n    });\n\n    test('prepareData with data with null values', () =&gt; {\n        // given\n\n        // when\n        const preparedData = prepareData();\n\n        // then\n        expect(preparedData).toEqual([]);\n    });\n});\n</code></pre> <p>Les tests unitaires permettent de v\u00e9rifier que la fonction <code>prepareData</code> fonctionne correctement en fonction des donn\u00e9es pass\u00e9es en param\u00e8tre.</p> <p>CharacterDetailPage</p> <p>Modifier le composant <code>src/pages/CharacterDetailPage.js</code> afin d'afficher le graphique D3.js et plus tard le graphique Recharts. </p> <pre><code>import React from 'react';\n\nimport { useLoaderData } from 'react-router';\nimport CharacterDetail from '../components/CharacterDetail';\nimport D3PieChart from '../components/D3PieChart';\n// import RechartsPieChart from '../components/RechartsPieChart';\n\nconst CharacterDetailPage = () =&gt; {\n    // retrieve the character using the useLoaderData hook\n    const character = useLoaderData();\n\n    document.title = `${character.name} | Marvel App`;\n\n    return (\n        &lt;&gt;\n            &lt;CharacterDetail character={character} /&gt;\n\n            &lt;h2&gt;Capacities&lt;/h2&gt;\n            &lt;div style={{ display: 'flex'}}&gt;\n                &lt;div style={{flex: '50%'}}&gt;\n                    &lt;h3&gt;Using D3&lt;/h3&gt;\n                    &lt;D3PieChart data={character.capacities} /&gt;\n                &lt;/div&gt;\n                &lt;div style={{flex: '50%'}}&gt;\n                    &lt;h3&gt;Using Recharts&lt;/h3&gt;\n                    {/* &lt;RechartsPieChart data={character.capacities} /&gt; */}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default CharacterDetailPage;\n</code></pre>"},{"location":"version-1.3.0/#d3js","title":"<code>d3.js</code>","text":"<p><code>d3.js</code> est une librairie JavaScript qui permet de manipuler le DOM pour cr\u00e9er des visualisations de donn\u00e9es. Elle est tr\u00e8s utilis\u00e9e dans le monde du web pour cr\u00e9er des graphiques, des cartes, des diagrammes, etc.</p> <p>Installer <code>d3.js</code> avec <code>npm</code>:</p> <pre><code>npm install d3\n</code></pre> <p>Cr\u00e9er le composant <code>src/components/D3PieChart.js</code> et impl\u00e9menter le graphique avec <code>d3.js</code>.</p> <pre><code>import PropTypes from 'prop-types';\nimport { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { prepareData } from './chart-utils';\n\n/**\n * Draw the pie chart\n * @param {*} data \n * @param {*} displayTooltip \n * @param {*} displayValue \n */\nconst drawChart = (data) =&gt; {\n    // Remove the old svg\n    d3.select('#pie-container')\n        .select('svg')\n        .remove();\n\n    // Create the color scale\n    const color = d3.scaleOrdinal()\n        // colors based on data\n        .domain(data.map(d =&gt; d.name))\n        // .range([\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"]);\n        .range(d3.schemeDark2);\n        //.range(d3.quantize(t =&gt; d3.interpolateSpectral(t * 0.8 + 0.1), filteredData.length).reverse());\n\n    // Define the diameter of the pie\n    const diameter = 100;\n\n    // Define the margin\n    const margin = {\n        top: 10, right: 10, bottom: 10, left: 10,\n    };\n\n    // Define the width and height using the margin conventions\n    const width = 2 * diameter + margin.left + margin.right;\n    const height = 2 * diameter + margin.top + margin.bottom;\n\n    // Define the radius\n    const radius = Math.min(width, height) / 2;\n\n    // Create the arc\n    const arc = d3.arc()\n        .cornerRadius(5) // Rounded corners\n        .innerRadius(radius * 0.5) // This is the size of the donut hole\n        .outerRadius(radius) // This is the size of the donut\n        .padAngle(0.011) // padding between slices\n\n    // Create the pie\n    const pie = d3.pie(data)\n        .sort(null) // disable sorting of data\n        .value(d =&gt; d.value);\n\n    // Create the svg, with the right dimensions\n    const svg = d3\n        .select('#pie-container')\n        .append('svg')\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"viewBox\", [-width / 2, -height / 2, width, height]) // center the pie chart\n\n    // draw the donut\n    svg.append(\"g\")\n        .selectAll()\n        .data(pie(data))\n        .join(\"path\")\n        .attr(\"fill\", d =&gt; color(d.data.name))\n        .attr(\"d\", arc)\n\n    // add labels over the donut\n    svg.append(\"g\")\n        // text style\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", 12)\n        .attr(\"text-anchor\", \"middle\")\n        .selectAll()\n        .data(pie(data))\n        .join(\"text\")\n        // center the text\n        .attr(\"transform\", d =&gt; `translate(${arc.centroid(d)})`)\n        // add the name of the data\n        .call(text =&gt; text.append(\"tspan\")\n            .attr(\"id\", d =&gt; `pie-labels-name-${d.data.name}`)\n            .attr(\"x\", 0) // center the text\n            .attr(\"y\", \"-0.4em\") // add a space between the name and the value\n            .attr(\"font-weight\", \"bold\")\n            .text(d =&gt; d.data.name))\n        // add the value of the data\n        .call(text =&gt; text.filter(d =&gt; (d.endAngle - d.startAngle) &gt; 0.25).append(\"tspan\")\n            .attr(\"id\", d =&gt; `pie-labels-value-${d.data.name}`)\n            .attr(\"x\", 0) // center the text\n            .attr(\"y\", \"0.7em\") // add a space between the name and the value\n            .attr(\"fill-opacity\", 0.7) // make it lighter\n            .text(d =&gt; d.data.value)); // add the value\n};\n\n/**\n * Draw a pie chart with the statistics of a character\n * \n * @param {*} data\n * @param {*} displayTooltip\n * @param {*} displayValue\n */\nexport default function D3PieChart({\n    data,\n}) {\n    // useEffect is a hook that will run the code inside it only once when data is loaded\n    useEffect(() =&gt; {\n        // transform data\n        const preparedData = prepareData(data);\n\n        // draw the chart\n        drawChart(preparedData);\n    }, [data]);\n\n    return (\n        // Return the div that will contain the chart\n        &lt;div id=\"pie-container\" /&gt;\n    );\n}\n\nD3PieChart.propTypes = {\n    data: PropTypes.shape({\n        force: PropTypes.number,\n        intelligence: PropTypes.number,\n        energy: PropTypes.number,\n        speed: PropTypes.number,\n        durability: PropTypes.number,\n        fighting: PropTypes.number,\n    }),\n};\n</code></pre> <p>Le composant <code>D3PieChart</code> g\u00e9n\u00e8re une div avec l'id <code>pie-container</code> qui sera utilis\u00e9e pour afficher le graphique. Le hook <code>useEffect</code> permet de lancer le code de la fonction <code>drawChart</code> uniquement lorsque les donn\u00e9es sont charg\u00e9es.</p> <p>La fonction <code>drawChart</code> permet de dessiner le graphique. Elle prend en param\u00e8tre les donn\u00e9es \u00e0 afficher. Elle utilise la librairie <code>d3.js</code> pour dessiner le graphique. Il n'y a pas de sp\u00e9cificit\u00e9 React dans cette fonction.</p> <p>Tout d'abord, on supprime le graphique pr\u00e9c\u00e9dent, s'il existe.</p> <p>On d\u00e9finit ensuite les informations n\u00e9cessaires pour dessiner le graphique : la couleur, les dimensions du graphique (marges, largeur, hauteur, rayon...).</p> <p>La couleur est d\u00e9finie \u00e0 l'aide de la fonction <code>d3.scaleOrdinal()</code>. Cette fonction permet de d\u00e9finir une \u00e9chelle de couleur. On lui passe en param\u00e8tre un tableau avec les couleurs \u00e0 utiliser. On peut utiliser des couleurs pr\u00e9d\u00e9finies avec <code>d3.schemeDark2</code> ou <code>d3.quantize(t =&gt; d3.interpolateSpectral(t * 0.8 + 0.1), filteredData.length).reverse()</code>.</p> <p>On cr\u00e9e ensuite l'arc avec la fonction <code>d3.arc()</code>. Cette fonction permet de d\u00e9finir la forme des arcs du graphique. On d\u00e9finit la taille du trou au centre du graphique avec <code>innerRadius</code> (afin de cr\u00e9er un donut chart) et la taille du graphique avec <code>outerRadius</code>.</p> <p>La fonction <code>d3.pie()</code> permet de d\u00e9finir le type de graphique \u00e0 dessiner. On lui passe en param\u00e8tre les donn\u00e9es \u00e0 afficher. On peut d\u00e9finir le tri des donn\u00e9es avec <code>sort</code> et la valeur \u00e0 utiliser pour dessiner le graphique avec <code>value</code>.</p> <p>On cr\u00e9e ensuite le svg avec la fonction <code>d3.select()</code>. On lui passe en param\u00e8tre l'\u00e9l\u00e9ment du DOM dans lequel on veut dessiner le graphique. On d\u00e9finit ensuite les dimensions du svg afin qu'il prenne toute la place disponible. On centre le graphique avec <code>viewBox</code>.</p> <p>On dessine ensuite le donut, puis on ajoute les labels. </p> <p>La documentation de <code>d3.js</code> est disponible \u00e0 l'adresse https://d3js.org/.</p> <p>Test unitaire</p> <p>Ajouter le test unitaire pour le composant <code>D3PieChart</code> dans le fichier <code>src/components/D3PieChart.test.js</code>.</p> <p>Pour tester le composant <code>D3PieChart</code>, on peut v\u00e9rifier :</p> <ul> <li>que le svg est bien dessin\u00e9</li> <li>que les labels sont bien dessin\u00e9s</li> <li>qu'il y a bien 6 arcs </li> </ul> <pre><code>import { render } from '@testing-library/react';\nimport D3PieChart from './D3PieChart';\n\ndescribe('D3PieChart', () =&gt; {\n    test('renders without error', () =&gt; {\n        render(&lt;D3PieChart data={{}} /&gt;);\n    });\n\n    test('renders the pie chart with correct data', () =&gt; {\n        // when\n        const data = {\n            force: 10,\n            intelligence: 20,\n            energy: 30,\n            speed: 40,\n            durability: 50,\n            fighting: 60,\n        };\n\n        // then\n        render(&lt;D3PieChart data={data} /&gt;);\n\n        // expect to have a pie chart container\n        expect(document.getElementById('pie-container')).toBeInTheDocument();\n\n        // expect to have a svg element\n        const svgElement = document.querySelector('svg');\n        expect(svgElement).toBeInTheDocument();\n\n        // expect to have a path element for each data\n        const pathElements = document.querySelectorAll('path');\n        expect(pathElements).toHaveLength(Object.keys(data).length);\n\n        expect(svgElement.getElementById('pie-labels-name-Force')).toBeInTheDocument();\n        expect(svgElement.getElementById('pie-labels-name-Intelligence')).toBeInTheDocument();\n        expect(svgElement.getElementById('pie-labels-name-Energy')).toBeInTheDocument();\n        expect(svgElement.getElementById('pie-labels-name-Speed')).toBeInTheDocument();\n        expect(svgElement.getElementById('pie-labels-name-Durability')).toBeInTheDocument();\n        expect(svgElement.getElementById('pie-labels-name-Fighting')).toBeInTheDocument();\n    });\n});\n</code></pre>"},{"location":"version-1.3.0/#recharts","title":"recharts","text":"<p><code>Recharts</code> est une librairie React qui permet de cr\u00e9er des graphiques. Elle est bas\u00e9e sur <code>d3.js</code>. Elle permet de cr\u00e9er des graphiques manipulant des composants React. Cela peut \u00eatre plus simple \u00e0 utiliser que <code>d3.js</code> pour des d\u00e9veloppeurs React, mais elle est moins flexible que <code>d3.js</code>. </p> <p>Installer <code>recharts</code> avec <code>npm</code>:</p> <pre><code>npm install recharts\n</code></pre> <p>D\u00e9commenter le composant <code>RechartsPieChart</code> dans le fichier <code>src/pages/CharacterDetailPage.js</code>.</p> <p>Cr\u00e9\u00e9r le composant <code>src/components/RechartsPieChart.js</code> et impl\u00e9menter le graphique avec <code>recharts</code>.</p> <pre><code>import PropTypes from 'prop-types';\nimport { PieChart, Pie, Tooltip, Cell } from 'recharts';\nimport { prepareData } from './chart-utils';\n\nconst RechartsPieChart = ({ data }) =&gt; {\n    // Prepare the data\n    let transformedData = prepareData(data);\n\n    // Define the colors\n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n    return (\n        &lt;PieChart width={300} height={224} &gt;\n            &lt;Pie dataKey=\"value\" cx={100} cy={100} data={transformedData} innerRadius={40} outerRadius={80} label&gt;\n                {\n                    transformedData.map((entry) =&gt; &lt;Cell key={`cell-${entry.name}`} fill={COLORS[transformedData.indexOf(entry) % COLORS.length]} /&gt;)\n                }\n            &lt;/Pie&gt;\n            &lt;Tooltip /&gt;\n        &lt;/PieChart&gt;\n    );\n}\n\nRechartsPieChart.propTypes = {\n    data: PropTypes.shape({\n        force: PropTypes.number,\n        intelligence: PropTypes.number,\n        energy: PropTypes.number,\n        speed: PropTypes.number,\n        durability: PropTypes.number,\n        fighting: PropTypes.number,\n    }),\n};\n\nexport default RechartsPieChart;\n</code></pre> <p>Le composant <code>RechartsPieChart</code> g\u00e9n\u00e8re un graphique avec la librairie <code>recharts</code>. Il prend en param\u00e8tre les donn\u00e9es \u00e0 afficher. Il transforme les donn\u00e9es pour les mettre dans le format attendu par <code>recharts</code>. Il utilise ensuite les composants <code>PieChart</code>, <code>Pie</code>, <code>Tooltip</code> et <code>ResponsiveContainer</code> de <code>recharts</code> pour dessiner le graphique.</p> <p>Voir la documentation de <code>recharts</code> \u00e0 l'adresse https://recharts.org/en-US/. Et plus particuli\u00e8rement la documentation sur les pie charts \u00e0 l'adresse https://recharts.org/en-US/examples/PieChartWithPaddingAngle.</p> <p>Test unitaire</p> <p>Ajouter le test unitaire pour le composant <code>RechartsPieChart</code> dans le fichier <code>src/components/RechartsPieChart.test.js</code>.</p> <p>Pour tester le composant <code>RechartsPieChart</code>, celui-ci \u00e9tant bas\u00e9 sur <code>recharts</code>, on ne peut pas tester le graphique directement. On peut tester que les donn\u00e9es sont bien transform\u00e9es avec la fonction <code>prepareData</code> et que le composant est bien rendu.</p> <pre><code>import { render } from '@testing-library/react';\nimport RechartsPieChart from './RechartsPieChart';\n\ndescribe('RechartsPieChart', () =&gt; {\n    test('renders the pie chart with correct data', () =&gt; {\n        // when\n        const data = {\n            force: 80,\n            intelligence: 90,\n            energy: 70,\n            speed: 85,\n            durability: 75,\n            fighting: 95\n        };\n\n        // then\n        render(&lt;RechartsPieChart data={data} /&gt;);\n\n        // expect to be ok\n        expect(true).toBe(true);\n\n        // expect to have a div with the class \"recharts-wrapper\"\n        expect(document.querySelector('.recharts-wrapper')).toBeInTheDocument();\n    });\n\n    test(' don\\'t fail when data is null', () =&gt; {\n        // when\n        const data = null;\n\n        // then\n        render(&lt;RechartsPieChart data={data} /&gt;);\n\n        // expect to have a div with the class \"recharts-wrapper\"\n        expect(document.querySelector('.recharts-wrapper')).toBeInTheDocument();\n    });\n});\n</code></pre> <p>Du fait que le composant <code>RechartsPieChart</code> est bas\u00e9 sur <code>recharts</code>, on ne doit pas tester le graphique directement. En effet, <code>recharts</code> est une librairie externe, on ne doit pas tester son code, on n'en a pas la responsabilit\u00e9 et le code pourrait changer \u00e0 tout moment.</p> <p>On peut par contre tester que le composant est bien rendu.</p> <p>Adapter les tests unitaires</p> <p>Modifier le fichier <code>src/pages/CharacterDetailPage.test.js</code> afin de prendre en compte les modifications apport\u00e9es au composant <code>CharacterDetailPage</code>.</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport CharacterDetailPage from './CharacterDetailPage';\nimport { BrowserRouter } from 'react-router-dom';\n\n// fix for ResizeObserver not being defined in Jest\nconst { ResizeObserver } = window;\n\nbeforeEach(() =&gt; {\n    delete window.ResizeObserver;\n    window.ResizeObserver = jest.fn().mockImplementation(() =&gt; ({\n        observe: jest.fn(),\n        unobserve: jest.fn(),\n        disconnect: jest.fn()\n    }));\n});\n\nafterEach(() =&gt; {\n    window.ResizeObserver = ResizeObserver;\n    jest.restoreAllMocks();\n});\n\n// end fix for ResizeObserver not being defined in Jest\n\nconst character = {\n    id: \"1\",\n    name: \"Thor\",\n    description: \"Thor description\",\n}\n\n// mock the useLoaderData hook, so that we can test the CharacterDetailPage component\njest.mock('react-router', () =&gt; ({\n    ...jest.requireActual('react-router'), // use actual for all non-hook parts\n    useLoaderData: () =&gt; {\n        return character;\n    },\n}));\n\ndescribe('CharacterDetailPage', () =&gt; {\n\n    test('render CharacterDetailPage component', () =&gt; {\n        // when\n\n        // then\n        render(&lt;CharacterDetailPage /&gt;, { wrapper: BrowserRouter });\n\n        // expect the document title to be \"Thor | Marvel App\"\n        expect(document.title).toBe(`${character.name} | Marvel App`);\n\n        // expect to have a heading with the character name\n        const h2Element = screen.getByRole('heading', { level: 2, name: character.name });\n        expect(h2Element).toBeInTheDocument();\n\n        // expect to have a paragraph with the character description\n        const pElement = screen.getByText(character.description);\n        expect(pElement).toBeInTheDocument();\n\n        // expect to have a heading with the text \"Capacities\"\n        const h2CapacitiesElement = screen.getByRole('heading', { level: 2, name: 'Capacities' });\n        expect(h2CapacitiesElement).toBeInTheDocument();\n\n        // expect to have a heading with the text \"Using D3\"\n        const h3D3Element = screen.getByRole('heading', { level: 3, name: 'Using D3' });\n        expect(h3D3Element).toBeInTheDocument();\n\n        // expect to have a heading with the text \"Using Recharts\"\n        const h3RechartsElement = screen.getByRole('heading', { level: 3, name: 'Using Recharts' });\n        expect(h3RechartsElement).toBeInTheDocument();\n\n        // expect to have a div with the id \"pie-container\"\n        expect(document.getElementById('pie-container')).toBeInTheDocument();\n\n        // expect to a an div with class \"recharts-wrapper\"\n        expect(document.querySelector('.recharts-wrapper')).toBeInTheDocument();\n    });\n});\n</code></pre> <p>Ici on ajoute juste la v\u00e9rification que les \u00e9l\u00e9ments du graphique sont bien pr\u00e9sents dans le DOM, on ne v\u00e9rifie pas qu'ils sont bien dessin\u00e9s (cette v\u00e9rification est faite dans les tests unitaires des composants <code>D3PieChart</code> et <code>RechartsPieChart</code>).</p> <p><code>recharts</code> utilise <code>ResizeObserver</code> pour redessiner le graphique lorsque la taille de la fen\u00eatre change. Il faut donc ajouter un mock pour <code>ResizeObserver</code> afin de ne pas avoir d'erreur lors de l'ex\u00e9cution des tests unitaires.</p>"},{"location":"version-1.3.0/#comparaison-des-deux-librairies","title":"Comparaison des deux librairies","text":"<p>L'avantage de <code>d3.js</code> est qu'elle est tr\u00e8s flexible du fait qu'elle manipule directement le DOM. On peut donc faire des graphiques tr\u00e8s personnalis\u00e9s. Par contre, il faut avoir des connaissances en <code>d3.js</code> pour pouvoir l'utiliser. Elle n'est pas li\u00e9e \u00e0 React, il faut donc faire attention \u00e0 bien int\u00e9grer le graphique dans le cycle de vie de React, mais \u00e0 contrario, on peut l'utiliser dans d'autres frameworks ou m\u00eame sans framework (avec du JavaScript pur).</p> <p><code>recharts</code> est plus simple \u00e0 utiliser que <code>d3.js</code> et permet de cr\u00e9er des graphiques rapidement, toute la complexit\u00e9 est cach\u00e9e dans les composants React. Par contre, elle est moins flexible que <code>d3.js</code> et il peut \u00eatre difficile de faire des graphiques tr\u00e8s personnalis\u00e9s. Elle est li\u00e9e \u00e0 React, il n'est donc pas possible de l'utiliser dans d'autres frameworks ou avec du JavaScript pur.</p>"},{"location":"version-1.3.0/#librairie-externe","title":"Librairie externe","text":"<p>Lors de l'utilisation d'une librairie externe, il faut bien v\u00e9rifier la documentation et les exemples fournis afin de bien comprendre comment l'utiliser. Est-ce que la librairie est bien adapt\u00e9e \u00e0 notre besoin ? Est-ce que la librairie est facile \u00e0 utiliser ? Est-ce que la librairie est bien maintenue ? Est-ce que la librairie est utilis\u00e9e par la communaut\u00e9 ? Est-ce que je peux utiliser la librairie dans mon projet ? Est-ce que la librairie est payante ?</p>"},{"location":"version-1.3.0/#maintenance-communaute","title":"Maintenance / Communaut\u00e9","text":"<p>En effet, si la librairie n'est plus maintenue, elle peut devenir obsol\u00e8te et ne plus fonctionner avec les nouvelles versions des navigateurs et rendre notre application obsol\u00e8te. C'est un risque \u00e0 prendre en compte lors de l'utilisation d'une librairie externe.</p> <p>Si la librairie est utilis\u00e9e par la communaut\u00e9, cela signifie qu'elle est utilis\u00e9e par d'autres d\u00e9veloppeurs et qu'il y a donc plus de chance qu'elle soit maintenue, que les bugs soient corrig\u00e9s et que de nouvelles fonctionnalit\u00e9s soient ajout\u00e9es. </p> <p>Il est plus facile de trouver de l'aide sur internet, de m\u00eame que des exemples d'utilisation. Des outils d'IA comme github copilot s'appuient sur les exemples d'utilisation de la librairie pour g\u00e9n\u00e9rer du code.</p>"},{"location":"version-1.3.0/#licence","title":"Licence","text":"<p>Il est n\u00e9cessaire de v\u00e9rifier la licence de la librairie afin de savoir si l'on peut l'utiliser dans notre projet. Certaines librairies peuvent \u00eatre payantes ou avoir des licences restrictives.</p> <p>Par exemple une licence MIT permet d'utiliser la librairie dans un projet commercial, alors qu'une licence GPL impose que le projet soit open source. </p> <p>Pour des projets h\u00e9berg\u00e9s sur github l'information sur la licence est disponible dans le fichier <code>LICENSE</code> \u00e0 la racine du projet. github affiche ainsi quelques informations sur le type de licence et les conditions d'utilisation li\u00e9es \u00e0 la licence.</p> <p>Par exemple la licence de <code>d3.js</code> est une licence ISC, qui est une licence MIT modifi\u00e9e. Elle permet d'utiliser la librairie dans un projet commercial. https://github.com/d3/d3/blob/main/LICENSE</p> <p>La licence de <code>recharts</code> est une licence MIT. https://github.com/recharts/recharts/blob/master/LICENSE</p>"},{"location":"version-1.3.0/#documentation","title":"Documentation","text":"<p>Il faut aussi v\u00e9rifier la documentation de la librairie afin de bien comprendre comment l'utiliser. </p> <p>Est-ce que la documentation est \u00e0 jour ? compl\u00e8te ? facile \u00e0 comprendre ? contient des exemples d'utilisation ? ...</p>"},{"location":"version-1.3.0/#securite","title":"S\u00e9curit\u00e9","text":"<p>Est-ce qu'elle ne contient pas de failles de s\u00e9curit\u00e9 ? Est-ce que les failles de s\u00e9curit\u00e9 sont corrig\u00e9es rapidement ?</p> <p>Des outils existent pour v\u00e9rifier si une librairie contient des failles de s\u00e9curit\u00e9.</p> <p>npm audit</p> <p><code>npm audit</code> va v\u00e9rifier les librairies utilis\u00e9es par notre projet et va afficher les failles de s\u00e9curit\u00e9 trouv\u00e9es. </p> <pre><code>npm audit\n</code></pre> <p>Extraits de la sortie de la commande <code>npm audit</code> pour le projet <code>marvel-app</code>:</p> <pre><code>Axios  0.8.1 - 1.5.1\nSeverity: moderate\nAxios Cross-Site Request Forgery Vulnerability - https://github.com/advisories/GHSA-wf5p-g6vw-rhxx\nfix available via `npm audit fix --force`\nWill install browser-sync@2.23.7, which is a breaking change\nnode_modules/axios\n  localtunnel  &gt;=1.9.0\n  Depends on vulnerable versions of axios\n  node_modules/localtunnel\n    browser-sync  &gt;=2.24.0-rc1\n    Depends on vulnerable versions of localtunnel\n    ...\n</code></pre> <p>npm audit va afficher les failles de s\u00e9curit\u00e9 trouv\u00e9es, leur niveau de criticit\u00e9 et les librairies concern\u00e9es. </p> <p>Il est possible de corriger automatiquement (en fonction du num\u00e9ro de version de la librairie, semver) certaines des failles de s\u00e9curit\u00e9 avec la commande <code>npm audit fix</code>, si la mont\u00e9e de version n'implique pas de breaking change. </p> <pre><code>npm audit fix\n</code></pre> <p>Attention, m\u00eame si la mont\u00e9e de version n'implique pas de breaking change, il est possible que la mise \u00e0 jour de la librairie casse notre application. La pr\u00e9sence de tests unitaires avec une couverture de code suffisante permet de v\u00e9rifier que la mise \u00e0 jour ne casse pas notre application.</p> <p>On peut aussi utiliser l'option <code>--force</code> pour forcer la mise \u00e0 jour des librairies.</p> <pre><code>npm audit fix --force\n</code></pre> <p>Attention l'option <code>--force</code> veut dire qu'on ne tient pas compte des \u00e9ventuels probl\u00e8mes de compatibilit\u00e9 avec les nouvelles versions des librairies. Il y a donc un risque que la mise \u00e0 jour des librairies casse notre application. </p> <p>Cette commande est \u00e0 utiliser avec pr\u00e9caution et plut\u00f4t lorsque l'on souhaite mettre \u00e0 jour les librairies de notre projet et que l'on est pr\u00eat \u00e0 corriger les \u00e9ventuels probl\u00e8mes de compatibilit\u00e9. </p> <p>Tests unitaires</p> <p>Lors de la r\u00e9daction des tests unitaires, il faut faire attention \u00e0 ne pas tester le code de la librairie externe. On n'en a pas la responsabilit\u00e9 et le code pourrait changer \u00e0 tout moment. On doit donc tester uniquement notre code, c'est \u00e0 dire les donn\u00e9es que l'on passe \u00e0 la librairie externe et le fait que le composant soit bien rendu.</p>"},{"location":"version-1.3.0/#release-130","title":"Release 1.3.0","text":"<p>Committer et pusher les modifications et effectuer la release <code>1.3.0</code>.</p>"},{"location":"version-1.4.0/","title":"Version 1.4.0","text":""},{"location":"version-1.4.0/#objectifs","title":"Objectifs","text":"<ul> <li>Ajout de documentation gr\u00e2ce au langage Markdown</li> <li>Mise en oeuvre de <code>dependabot</code> pour la mise \u00e0 jour automatique des d\u00e9pendances et la cr\u00e9ation de PR associ\u00e9es</li> </ul>"},{"location":"version-1.4.0/#documentation","title":"Documentation","text":"<p>Markdown est un langage de balisage l\u00e9ger cr\u00e9\u00e9 en 2004 par John Gruber avec l'aide d'Aaron Swartz. Son but est d'offrir une syntaxe facile \u00e0 lire et \u00e0 \u00e9crire. Un document balis\u00e9 par Markdown peut \u00eatre lu en l'\u00e9tat sans donner l'impression d'avoir \u00e9t\u00e9 marqu\u00e9 par des balises ou des instructions particuli\u00e8res.</p> <p>Le fichier README.md est un fichier Markdown. Il est possible de le lire directement sur GitHub ou de le convertir en HTML pour l'afficher dans un navigateur.</p>"},{"location":"version-1.4.0/#syntaxe","title":"Syntaxe","text":"<p>Plus de d\u00e9tail sur le site markdownguide</p> <p>La syntaxe Markdown est tr\u00e8s simple. Elle permet de mettre en forme du texte en ajoutant des caract\u00e8res sp\u00e9ciaux. Par exemple, pour mettre un mot en gras, il suffit de l'entourer de deux ast\u00e9risques <code>**</code> ou de deux tirets bas <code>__</code>.</p>"},{"location":"version-1.4.0/#titres","title":"Titres","text":"<p>Pour cr\u00e9er un titre, il faut utiliser le caract\u00e8re <code>#</code> suivi du titre. Il est possible d'utiliser jusqu'\u00e0 6 caract\u00e8res <code>#</code> pour cr\u00e9er un titre de niveau 6.</p> <pre><code># Titre de niveau 1\n## Titre de niveau 2\n</code></pre>"},{"location":"version-1.4.0/#paragraphes","title":"Paragraphes","text":"<p>Pour cr\u00e9er un paragraphe, il faut \u00e9crire le texte du paragraphe sur une seule ligne.</p> <pre><code>Ceci est un paragraphe.\n</code></pre>"},{"location":"version-1.4.0/#texte","title":"Texte","text":"<p>Italique</p> <p>Pour mettre du texte en italique, il faut entourer le texte avec le caract\u00e8re <code>*</code> ou <code>_</code>.</p> <p><pre><code>*Texte en italique*\n_Texte en italique_\n</code></pre> Gras</p> <p>Pour mettre du texte en gras, il faut entourer le texte avec le caract\u00e8re <code>**</code> ou <code>__</code>.</p> <pre><code>**Texte en gras**\n__Texte en gras__\n</code></pre> <p>Italique et gras</p> <p>Pour mettre du texte en italique et en gras, il faut entourer le texte avec le caract\u00e8re <code>***</code> ou <code>___</code>.</p> <pre><code>***Texte en italique et en gras***\n___Texte en italique et en gras___\n</code></pre> <p>Barr\u00e9</p> <p>Pour barrer du texte, il faut entourer le texte avec le caract\u00e8re <code>~~</code>.</p> <pre><code>~~Texte barr\u00e9~~\n</code></pre> <p>Ceci est un paragraphe d'exemple avec du texte en italique, en gras et barr\u00e9 et un texte en italique et en gras.</p>"},{"location":"version-1.4.0/#listes","title":"Listes","text":"<p>Pour cr\u00e9er une liste, il faut utiliser le caract\u00e8re <code>-</code> ou <code>*</code> suivi du texte de l'\u00e9l\u00e9ment de la liste.</p> <pre><code>- \u00c9l\u00e9ment 1 \n- \u00c9l\u00e9ment 2\n</code></pre> <p>Listes ordonn\u00e9es</p> <p>Pour cr\u00e9er une liste ordonn\u00e9e, il faut utiliser le caract\u00e8re <code>1.</code> suivi du texte de l'\u00e9l\u00e9ment de la liste.</p> <pre><code>1. \u00c9l\u00e9ment 1\n2. \u00c9l\u00e9ment 2\n</code></pre> <p>Listes imbriqu\u00e9es</p> <p>Pour cr\u00e9er une liste imbriqu\u00e9e, il faut utiliser le caract\u00e8re <code>-</code> ou <code>*</code> suivi du texte de l'\u00e9l\u00e9ment de la liste.</p> <pre><code>- \u00c9l\u00e9ment 1\n  - \u00c9l\u00e9ment 1.1\n  - \u00c9l\u00e9ment 1.2\n- \u00c9l\u00e9ment 2\n</code></pre> <p>Listes imbriqu\u00e9es ordonn\u00e9es</p> <p>Pour cr\u00e9er une liste imbriqu\u00e9e ordonn\u00e9e, il faut utiliser le caract\u00e8re <code>1.</code> suivi du texte de l'\u00e9l\u00e9ment de la liste.</p> <pre><code>1. \u00c9l\u00e9ment 1\n   1. \u00c9l\u00e9ment 1.1\n   2. \u00c9l\u00e9ment 1.2   \n2. \u00c9l\u00e9ment 2\n</code></pre>"},{"location":"version-1.4.0/#liens","title":"Liens","text":"<p>Pour cr\u00e9er un lien, il faut utiliser le caract\u00e8re <code>[</code> suivi du texte du lien, puis du caract\u00e8re <code>]</code> suivi de l'URL du lien entre parenth\u00e8ses <code>()</code>.</p> <pre><code>[Texte du lien](https://www.google.com)\n</code></pre>"},{"location":"version-1.4.0/#images","title":"Images","text":"<p>Pour ins\u00e9rer une image, il faut utiliser le caract\u00e8re <code>!</code> suivi du caract\u00e8re <code>[</code> suivi du texte alternatif de l'image, puis du caract\u00e8re <code>]</code> suivi de l'URL de l'image entre parenth\u00e8ses <code>()</code>.</p> <pre><code>![Texte alternatif](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)\n</code></pre>"},{"location":"version-1.4.0/#code","title":"Code","text":"<p>Pour ins\u00e9rer du code, il faut utiliser le caract\u00e8re ` (Alt Gr + 7) pour ins\u00e9rer du code sur une ligne ou le caract\u00e8re ``` pour ins\u00e9rer du code sur plusieurs lignes.</p> <p>Il est possible de sp\u00e9cifier le langage du code pour avoir une coloration syntaxique, par exemple <code>```javascript</code> pour du code JavaScript, <code>```python</code> pour du code Python, etc.</p> <pre><code>function hello() {\n    console.log(\"Hello World!\");\n} \n</code></pre> <pre><code>def hello():\n    print(\"Hello World!\")\n</code></pre>"},{"location":"version-1.4.0/#tableaux","title":"Tableaux","text":"<p>Pour cr\u00e9er un tableau, il faut utiliser le caract\u00e8re <code>|</code> pour s\u00e9parer les colonnes et le caract\u00e8re <code>-</code> pour s\u00e9parer la premi\u00e8re ligne du reste du tableau.</p> <pre><code>| Colonne 1 | Colonne 2 |\n| --------- | --------- |\n| Ligne 1   | Ligne 1   |\n| Ligne 2   | Ligne 2   |\n</code></pre>"},{"location":"version-1.4.0/#badges","title":"Badges","text":"<p>Il est possible d'ajouter des badges dans le fichier README.md pour afficher des informations sur le projet. Par exemple, il est possible d'ajouter un badge pour afficher le nombre de t\u00e9l\u00e9chargements du projet sur npm.</p> <pre><code>[![npm](https://img.shields.io/npm/dt/express.svg)](https://www.npmjs.com/package/express)\n</code></pre> <p></p> <p>Les badges sont des images h\u00e9berg\u00e9es sur le site shields.io. Il est possible de cr\u00e9er des badges pour afficher des informations sur le projet, par exemple le nombre de t\u00e9l\u00e9chargements, le nombre de stars sur GitHub, etc.</p> <p>Les github actions permettent d'ajouter des badges pour afficher le statut des workflows. SonarCloud permet d'ajouter des badges pour afficher la qualit\u00e9 du code, la couverture des tests, etc.</p>"},{"location":"version-1.4.0/#mermaid","title":"Mermaid","text":"<p>Il est possible d'ajouter des diagrammes gr\u00e2ce \u00e0 la librairie mermaid. Par exemple, pour cr\u00e9er un diagramme de s\u00e9quence, il faut utiliser la syntaxe suivante :</p> <pre><code>```mermaid\nsequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    John--&gt;&gt;Alice: Great!\n    Alice-)John: See you later!\n</code></pre> <pre><code>sequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    John--&gt;&gt;Alice: Great!\n    Alice-)John: See you later!</code></pre>"},{"location":"version-1.4.0/#readmemd","title":"README.md","text":"<p>Mettre \u00e0 jour le fichier README.md du projet pour tester la syntaxe Markdown.</p> <p> </p>"},{"location":"version-1.4.0/#dependabot","title":"Dependabot","text":"<p>Dependabot est un service qui permet de mettre \u00e0 jour automatiquement les d\u00e9pendances d'un projet et de cr\u00e9er des PR associ\u00e9es.</p> <p>Pour configurer dependabot, il faut cr\u00e9er un fichier <code>.github/dependabot.yml</code>. Ce fichier permet de configurer les d\u00e9pendances \u00e0 mettre \u00e0 jour et la fr\u00e9quence de mise \u00e0 jour.</p> <pre><code># To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates\n\nversion: 2\nupdates:\n  - package-ecosystem: \"npm\" # See documentation for possible values\n    directory: \"/\" # Location of package manifests\n    schedule:\n      interval: \"weekly\"\n    groups:\n      dev-dependencies:\n        dependency-type: development\n</code></pre> <p>Une fois le fichier de configuration pr\u00e9sent sur la branche principale, des PR sont automatiquement cr\u00e9\u00e9es pour mettre \u00e0 jour les d\u00e9pendances.</p> <p></p> <p>Du fait que le projet est configur\u00e9 pour lancer la construction et l'ex\u00e9cution des tests \u00e0 chaque PR, une PR valide peut \u00eatre merg\u00e9 sans risque. Il est possible de configurer dependabot pour qu'il merge automatiquement les PR valides.</p> <p>La mise en oeuvre de dependabot permet de maintenir \u00e0 jour les d\u00e9pendances du projet et de s'assurer que le projet reste compatible avec les derni\u00e8res versions des d\u00e9pendances et de corriger les vuln\u00e9rabilit\u00e9s lorsque cela est possible.</p>"},{"location":"version-1.5.0/","title":"Version 1.5.0","text":""},{"location":"version-1.5.0/#objectifs","title":"Objectifs","text":"<ul> <li>Evaluation des comp\u00e9tences acquises en d\u00e9veloppement web</li> <li>Evaluation des comp\u00e9tences acquises en bonnes pratiques de d\u00e9veloppement</li> </ul>"},{"location":"version-1.5.0/#session-1","title":"Session 1","text":"<p>Session 1 - Lundi 4 D\u00e9cembre 2023</p>"},{"location":"version-1.5.0/#consignes","title":"Consignes","text":"<ul> <li>Afficher la date de modification du personnage (donn\u00e9e <code>modified</code> d'un personnage) dans un format lisible par un humain, la date de modification est au format ISO 8601 et ne doit pas \u00eatre modifi\u00e9e dans le fichier JSON</li> <li>Ajouter l'affichage de cette date dans la liste des personnages</li> <li>Faire en sorte que cette date s'affiche de la m\u00eame mani\u00e8re (format de la date) dans la liste des personnages et dans le d\u00e9tail d'un personnage</li> </ul> <p>Le visuel attendu pour la liste des personnages devrait ressembler \u00e0 ceci :</p> <p></p>"},{"location":"version-1.5.0/#remarques","title":"Remarques","text":"<ul> <li>La librairie <code>date-fns</code> permet de manipuler des dates en JavaScript</li> <li>Le fait de modifier le comportement des pages a un impact sur les tests unitaires associ\u00e9s \u00e0 ces pages.<ul> <li>Il faut donc les modifier pour qu'ils passent \u00e0 nouveau et/ou ajouter de nouveaux tests unitaires et/ou adapter le composant pour g\u00e9rer les diff\u00e9rents cas de figure.</li> <li>le test <code>CharactersList.test.js</code> v\u00e9rifie la pr\u00e9sence de lien \u00e0 partir du nom des personnages, ce test n'est peut-\u00eatre plus adapt\u00e9 et doit \u00eatre modifi\u00e9 pour v\u00e9rifier la pr\u00e9sence de lien \u00e0 partir d'un identifiant unique (donn\u00e9e <code>id</code> d'un personnage), la propri\u00e9t\u00e9 <code>data-testid</code> et la m\u00e9thode <code>getByTestId</code> pourraient \u00eatre utiles</li> <li>Il est possible de modifier le jeu de donn\u00e9es de test (attention pas les donn\u00e9es <code>src/data/characters.json</code>) pour v\u00e9rifier le comportement attendu du composant</li> </ul> </li> <li>Les balises <code>&lt;strong&gt;</code> et <code>&lt;small&gt;</code> sont des balises HTML qui permettent de mettre en forme du texte, en mettant en avant certains mots ou en r\u00e9duisant la taille du texte. Elles peuvent \u00eatre utilis\u00e9es dans un composant React comme n'importe quelle autre balise HTML</li> </ul>"},{"location":"version-1.5.0/#evaluation","title":"Evaluation","text":""},{"location":"version-1.5.0/#questions","title":"Questions","text":"<p>R\u00e9pondre aux questions suivantes dans un fichier <code>answers-session-1.md</code> \u00e0 la racine du projet.</p> <p>git</p> <ul> <li>Quel est l'int\u00e9r\u00eat de commiter r\u00e9guli\u00e8rement et de mani\u00e8re atomique ?</li> <li>A quoi sert une branche de type <code>feature</code> dans un d\u00e9veloppement logiciel de type <code>git flow</code> ?</li> <li>Quelle est la diff\u00e9rence entre une branche <code>main</code> et une branche <code>develop</code> ?</li> <li>Quelle est la diff\u00e9rence entre <code>git add</code>, <code>git commit</code> et <code>git push</code> ?</li> </ul> <p>github</p> <ul> <li>Quel est l'int\u00e9r\u00eat d'une protection de branche ?</li> <li>Quel est l'int\u00e9r\u00eat d'une pull request ?</li> </ul> <p>versionning</p> <ul> <li>Dans quel cas passer d'une version <code>1.0.0</code> \u00e0 <code>1.0.1</code> ?</li> <li>Dans quel cas passer d'une version <code>1.0.0</code> \u00e0 <code>1.1.0</code> ?</li> <li>A quoi sert une version <code>release candidate</code> ?</li> </ul> <p>test</p> <ul> <li>Quel est l'int\u00e9r\u00eat des tests unitaires ?</li> </ul>"},{"location":"version-1.5.0/#code","title":"Code","text":"<ul> <li>Les bonnes pratiques de d\u00e9veloppement doivent \u00eatre respect\u00e9es (commit, nommage, formatage, ...) afin de faciliter la relecture du code et seront \u00e9valu\u00e9es,</li> <li>Proposer cette modification \u00e0 l'\u00e9quipe de d\u00e9veloppement (alex1dregirard) pour une \u00e9ventuelle int\u00e9gration au projet si elle est jug\u00e9e pertinente, c'est cette modification qui sera \u00e9valu\u00e9e, </li> <li>Les modifications doivent \u00eatre valid\u00e9es en fin de session 1, aucune modification ne sera accept\u00e9e apr\u00e8s la fin de la session.  </li> </ul>"},{"location":"version-1.5.0/#session-2","title":"Session 2","text":"<p>Session 2 - Mercredi 6 D\u00e9cembre 2023</p>"},{"location":"version-1.5.0/#consignes_1","title":"Consignes","text":"<ul> <li>Cr\u00e9er une page permettant de comparer deux personnages</li> <li>Ajouter un \u00e9l\u00e9ment de navigation permettant d'acc\u00e9der \u00e0 cette page</li> </ul> <p>Le visuel attendu pour la page de comparaison devrait ressembler \u00e0 ceci :</p> <p></p>"},{"location":"version-1.5.0/#remarques_1","title":"Remarques","text":"<ul> <li>La libraire <code>recharts</code> et plus particuli\u00e8rement le composant <code>RadarChart</code> permet de cr\u00e9er le graphique de comparaison. Voir la documentation de la librairie pour plus d'informations. https://recharts.org/en-US/api/RadarChart</li> <li>Le code existant de l'application pourrait servir de base....</li> <li>Il s'agit d'une nouvelle feature, la fonctionnalit\u00e9 de la session 1 n'a (en th\u00e9orie) pas encore \u00e9t\u00e9 int\u00e9gr\u00e9e au projet, elle est toujours en attente de validation par l'\u00e9quipe de d\u00e9veloppement.</li> </ul> <p>\ud83d\ude39-GPT n'est pas toujours la meilleure solution... \ud83e\ude84 \ud83e\udde0</p> <p>Ci-dessous un d\u00e9but de code pour la page de comparaison :</p> <pre><code>import React from 'react';\n\nconst CompareCharactersPage = () =&gt; {\n    // change the title of the page\n    document.title = \"Compare | Marvel App\";\n\n    // to be replaced with the real data\n    const characters = [\n        {\n            name: '...'\n        },{\n            name: '...'\n        }\n    ]\n\n    // transform the characters to array of label/value objects\n    const options = characters.map((character, index) =&gt; ({\n        value: index,\n        label: character.name,\n    }));\n\n    // set the default options to the first two characters\n    const [option1, setOption1] = React.useState(options[0]);\n    const [option2, setOption2] = React.useState(options[1]);\n\n    const centerStyle = {\n        textAlign: 'center',\n        width: 500,\n    };\n\n    return (\n        &lt;&gt;\n            &lt;h2&gt;Compare characters&lt;/h2&gt;\n\n            &lt;p style={centerStyle}&gt;\n                &lt;select\n                    value={option1.value}\n                    onChange={(event) =&gt; setOption1(options[event.target.value])}\n                &gt;\n                    {options.map((option) =&gt; (\n                        &lt;option key={option.value} value={option.value}&gt;\n                            {option.label}\n                        &lt;/option&gt;\n                    ))}\n                &lt;/select&gt;&amp;nbsp; {/* Fix the ambiguous spacing */}\n                with&amp;nbsp;\n                &lt;select\n                    value={option2.value}\n                    onChange={(event) =&gt; setOption2(options[event.target.value])}\n                &gt;\n                    {options.map((option) =&gt; (\n                        &lt;option key={option.value} value={option.value}&gt;\n                            {option.label}\n                        &lt;/option&gt;\n                    ))}\n                &lt;/select&gt;\n            &lt;/p&gt;\n\n            &lt;p style={centerStyle}&gt;\n                {characters[option1.value].name} vs {characters[option2.value].name}\n            &lt;/p&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default CompareCharactersPage;\n</code></pre>"},{"location":"version-1.5.0/#evaluation_1","title":"Evaluation","text":""},{"location":"version-1.5.0/#questions_1","title":"Questions","text":"<p>R\u00e9pondre aux questions suivantes dans un fichier <code>answers-session-2.md</code> \u00e0 la racine du projet.</p> <p>m\u00e9thode agile</p> <ul> <li>Quel est l'int\u00e9r\u00eat d'une m\u00e9thode agile dans un projet de d\u00e9veloppement logiciel ?</li> <li>Quel est l'int\u00e9r\u00eat d'un sprint dans une m\u00e9thode agile ?</li> </ul> <p>librairie</p> <ul> <li>Quel est l'int\u00e9r\u00eat d'utiliser une librairie externe ?</li> <li>Quelles sont les pr\u00e9cautions \u00e0 prendre lors de l'utilisation d'une librairie externe ?</li> </ul> <p>composant</p> <ul> <li>Quel est l'int\u00e9r\u00eat de d\u00e9couper une application en composants ?</li> </ul> <p>test</p> <ul> <li>Est-ce qu'une couverture de test \u00e0 100% garantie l'absence de bug ?</li> <li>Un test unitaire utilise-t-il des donn\u00e9es r\u00e9elles ou des donn\u00e9es fictives ?</li> <li>Quel est le but d'un mock ?</li> </ul> <p>documentation</p> <ul> <li>Quel est l'int\u00e9r\u00eat du fichier README.md ?</li> </ul> <p>code</p> <ul> <li>Les principes de d\u00e9veloppement mis en oeuvre peuvent-ils \u00eatre appliqu\u00e9s \u00e0 d'autres projets, d'autres langages et pourquoi ?</li> </ul>"},{"location":"version-1.5.0/#code_1","title":"Code","text":"<ul> <li>Comme pour la session 1, proposer cette modification \u00e0 l'\u00e9quipe de d\u00e9veloppement (alex1dregirard) pour une \u00e9ventuelle int\u00e9gration au projet si elle est jug\u00e9e pertinente, c'est cette modification qui sera \u00e9valu\u00e9e,</li> <li>Les modifications doivent \u00eatre valid\u00e9es en fin de session 2, aucune modification ne sera accept\u00e9e apr\u00e8s la fin de la session.</li> </ul>"},{"location":"slides/marvel-app-0.3.0/","title":"Marvel App - 0.3.0","text":""},{"location":"slides/marvel-app-0.3.0/#objectifs","title":"Objectifs","text":"<ul> <li>Transformation de l'application en react</li> </ul>"},{"location":"slides/marvel-app-0.3.0/#react","title":"React","text":"<p>React est une librairie javascript d\u00e9velopp\u00e9e par Facebook et utilis\u00e9e par de nombreux sites web (Facebook, Netflix, Airbnb, etc...).</p> <p>Les principaux concepts de React : https://but-sd.github.io/guide-react/</p> <p><code>create-react-app</code> est un outil qui permet de cr\u00e9er une application React en quelques secondes.</p>"},{"location":"slides/marvel-app-0.3.0/#transformation-de-lapplication","title":"Transformation de l'application","text":"<ul> <li>R\u00e9cup\u00e9ration des fichiers n\u00e9cessaires \u00e0 la cr\u00e9ation de l'application React</li> <li>Cr\u00e9ation de composants React<ul> <li>CharacterList</li> <li>NumberOfCharacters</li> </ul> </li> </ul>"},{"location":"slides/marvel-app-0.4.0/","title":"Marvel App - 0.4.0","text":""},{"location":"slides/marvel-app-0.4.0/#objectifs","title":"Objectifs","text":"<ul> <li>Cr\u00e9ation de pages</li> <li>Navigation entre les pages<ul> <li>layout</li> <li>routes</li> <li>links</li> </ul> </li> </ul>"},{"location":"slides/marvel-app-0.4.0/#creation-de-pages","title":"Cr\u00e9ation de pages","text":"<p>Une page est un composant React comme les autres. Elle peut \u00eatre compos\u00e9e d'autres composants React.</p> <ul> <li>Cr\u00e9ation des pages<ul> <li>About: page d'information sur l'application</li> <li>Contact: page de contact</li> <li>Home: page d'accueil</li> </ul> </li> </ul>"},{"location":"slides/marvel-app-0.4.0/#navigation-entre-les-pages","title":"Navigation entre les pages","text":""},{"location":"slides/marvel-app-0.4.0/#layout","title":"Layout","text":"<p>Le layout est un composant React qui va \u00eatre affich\u00e9 sur plusieurs pages de l'application.</p> <p>Le layout contient les \u00e9l\u00e9ments communs \u00e0 toutes les pages de l'application.</p>"},{"location":"slides/marvel-app-0.4.0/#navigation-entre-les-pages_1","title":"Navigation entre les pages","text":""},{"location":"slides/marvel-app-0.4.0/#routes","title":"Routes","text":"<p>Les routes permettent de d\u00e9finir quel composant React doit \u00eatre affich\u00e9 en fonction de l'URL.</p>"},{"location":"slides/marvel-app-0.4.0/#navigation-entre-les-pages_2","title":"Navigation entre les pages","text":""},{"location":"slides/marvel-app-0.4.0/#links","title":"Links","text":"<p>Les links permettent de cr\u00e9er des liens entre les pages de l'application.</p> <p>react-router propose 2 types de links :</p> <ul> <li>Link: permet de cr\u00e9er un lien vers une page de l'application</li> <li>NavLink: permet de cr\u00e9er un lien vers une page de l'application et de le mettre en surbrillance</li> </ul>"}]}